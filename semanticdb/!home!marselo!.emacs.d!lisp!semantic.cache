;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "package.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("package" customgroup (:user-visible-flag t) nil [7736 7836])
            ("package-enable-at-startup" variable (:default-value t) nil [7853 8296])
            ("package-load-list" variable (:default-value (quote (all))) nil [8298 9110])
            ("Info-directory-list" variable nil nil [9112 9140])
            ("declare-function" code nil nil [9141 9185])
            ("declare-function" code nil nil [9186 9242])
            ("declare-function" code nil nil [9243 9291])
            ("declare-function" code nil nil [9292 9352])
            ("url-http-end-of-headers" variable nil nil [9353 9385])
            ("package-archives" variable (:default-value (quote (("gnu" . "http://elpa.gnu.org/packages/")))) nil [9387 10038])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [10040 10212])
            ("package-el-version" variable
               (:constant-flag t
                :default-value "1.0")
                nil [10214 10276])
            ("package-archive-contents" variable nil nil [10341 10725])
            ("put" code nil nil [10726 10781])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [10783 11103])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [11105 11700])
            ("package--builtins" variable nil nil [11832 12371])
            ("put" code nil nil [12372 12420])
            ("package-alist" variable nil nil [12422 13013])
            ("put" code nil nil [13014 13069])
            ("package-activated-list" variable nil nil [13071 13161])
            ("put" code nil nil [13162 13215])
            ("package-obsolete-alist" variable nil nil [13217 13393])
            ("put" code nil nil [13394 13447])
            ("package-subdirectory-regexp" variable
               (:constant-flag t
                :default-value "\\`\\([^.].*?\\)-\\([0-9]+\\(?:[.][0-9]+\\|\\(?:pre\\|beta\\|alpha\\)[0-9]+\\)*\\)\\'")
                nil [13449 13738])
            ("package-version-join" function (:arguments ("vlist")) nil [13740 14665])
            ("package-strip-version" function (:arguments ("dirname")) nil [14667 14910])
            ("package-load-descriptor" function (:arguments ("dir" "package")) nil [14912 15400])
            ("package-load-all-descriptors" function nil nil [15402 16697])
            ("package-desc-vers" function (:arguments ("desc")) nil [16699 16805])
            ("package-desc-reqs" function (:arguments ("desc")) nil [16807 16918])
            ("package-desc-doc" function (:arguments ("desc")) nil [16920 17028])
            ("package-desc-kind" function (:arguments ("desc")) nil [17030 17158])
            ("package--dir" function (:arguments ("name" "version")) nil [17160 17640])
            ("package-activate-1" function (:arguments ("package" "pkg-vec")) nil [17642 18407])
            ("package-built-in-p" function (:arguments ("package" "version")) nil [18409 18710])
            ("package-activate" function (:arguments ("package" "version")) nil [18953 20205])
            ("package-mark-obsolete" function (:arguments ("package" "pkg-vec")) nil [20207 20750])
            ("define-package" function (:arguments ("name-string" "version-string" "docstring" "requirements" "extra-properties")) nil [20752 22310])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [22330 22878])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [22880 23301])
            ("package-untar-buffer" function nil nil [23303 23857])
            ("package-unpack" function (:arguments ("name" "version")) nil [23859 24349])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [24351 24506])
            ("package-unpack-single" function (:arguments ("file-name" "version" "desc" "requires")) nil [24508 25708])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [25710 26861])
            ("package-handle-response" function nil nil [26863 27494])
            ("package-download-single" function (:arguments ("name" "version" "desc" "requires")) nil [27496 27824])
            ("package-download-tar" function (:arguments ("name" "version")) nil [27826 28095])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [28097 28475])
            ("package-compute-transaction" function (:arguments ("package-list" "requirements")) nil [28477 30609])
            ("package-read-from-string" function (:arguments ("str")) nil [30611 31082])
            ("package--read-archive-file" function (:arguments ("file")) nil [31084 31683])
            ("package-read-all-archive-contents" function nil nil [31685 31948])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [31950 32502])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [32504 33075])
            ("package-download-transaction" function (:arguments ("package-list")) nil [33077 34042])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [34059 34774])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [34776 35148])
            ("package-buffer-info" function nil nil [35150 37072])
            ("package-tar-file-info" function (:arguments ("file")) nil [37074 38910])
            ("package-install-from-buffer" function
               (:user-visible-flag t
                :arguments ("pkg-info" "type"))
                nil [38927 40132])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [40149 40672])
            ("package-delete" function (:arguments ("name" "version")) nil [40674 41100])
            ("package-archive-base" function (:arguments ("name")) nil [41102 41330])
            ("package--download-one-archive" function (:arguments ("archive" "file")) nil [41332 42063])
            ("package-refresh-contents" function (:user-visible-flag t) nil [42065 42605])
            ("package--initialized" variable nil nil [42607 42640])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [42657 43182])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [43235 44355])
            ("describe-package-1" function (:arguments ("package")) nil [44357 48655])
            ("package-install-button-action" function (:arguments ("button")) nil [48657 48913])
            ("package-menu-mode-map" variable (:default-value (let ((map (copy-keymap special-mode-map)) (menu-map (make-sparse-keymap "Package"))) (set-keymap-parent map button-buffer-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "r" (quote package-menu-refresh)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "?" (quote package-menu-describe-package)) (define-key map [follow-link] (quote mouse-face)) (define-key map [mouse-2] (quote mouse-select-window)) (define-key map [menu-bar package-menu] (cons "Package" menu-map)) (define-key menu-map [mq] (quote (menu-item "Quit" quit-window :help "Quit package selection"))) (define-key menu-map [s1] (quote ("--"))) (define-key menu-map [mn] (quote (menu-item "Next" next-line :help "Next Line"))) (define-key menu-map [mp] (quote (menu-item "Previous" previous-line :help "Previous Line"))) (define-key menu-map [s2] (quote ("--"))) (define-key menu-map [mu] (quote (menu-item "Unmark" package-menu-mark-unmark :help "Clear any marks on a package and move to the next line"))) (define-key menu-map [munm] (quote (menu-item "Unmark backwards" package-menu-backup-unmark :help "Back up one line and clear any marks on that package"))) (define-key menu-map [md] (quote (menu-item "Mark for deletion" package-menu-mark-delete :help "Mark a package for deletion and move to the next line"))) (define-key menu-map [mi] (quote (menu-item "Mark for install" package-menu-mark-install :help "Mark a package for installation and move to the next line"))) (define-key menu-map [s3] (quote ("--"))) (define-key menu-map [mg] (quote (menu-item "Update package list" revert-buffer :help "Update the list of packages"))) (define-key menu-map [mr] (quote (menu-item "Refresh package list" package-menu-refresh :help "Download the ELPA archive"))) (define-key menu-map [s4] (quote ("--"))) (define-key menu-map [mt] (quote (menu-item "Mark obsolete packages" package-menu-mark-obsolete-for-deletion :help "Mark all obsolete packages for deletion"))) (define-key menu-map [mx] (quote (menu-item "Execute actions" package-menu-execute :help "Perform all the marked actions"))) (define-key menu-map [s5] (quote ("--"))) (define-key menu-map [mh] (quote (menu-item "Help" package-menu-quick-help :help "Show short key binding help for package-menu-mode"))) (define-key menu-map [mc] (quote (menu-item "View Commentary" package-menu-view-commentary :help "Display information about this package"))) map)) nil [48942 51924])
            ("package-menu-sort-button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (quote package-menu-sort-by-column)) (define-key map [header-line mouse-2] (quote package-menu-sort-by-column)) (define-key map [follow-link] (quote mouse-face)) map)) nil [51926 52247])
            ("put" code nil nil [52249 52294])
            ("define-derived-mode" code nil nil [52296 53439])
            ("package-menu-refresh" function (:user-visible-flag t) nil [53441 53810])
            ("package-menu-revert" function
               (:user-visible-flag t
                :arguments ("arg" "noconfirm"))
                nil [53812 54150])
            ("package-menu-describe-package" function (:user-visible-flag t) nil [54152 54388])
            ("package-menu-mark-internal" function (:arguments ("what")) nil [54390 54573])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [54601 54836])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [54838 55078])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [55080 55233])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [55235 55421])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [55423 55726])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [55728 55907])
            ("define-obsolete-function-alias" code nil nil [55909 56011])
            ("package-menu-get-package" function nil nil [56068 56218])
            ("package-menu-get-version" function nil nil [56278 56427])
            ("package-menu-get-status" function nil nil [56429 56575])
            ("package-menu-execute" function (:user-visible-flag t) nil [56577 58332])
            ("package-print-package" function (:arguments ("package" "version" "key" "desc")) nil [58334 59411])
            ("package-list-maybe-add" function (:arguments ("package" "version" "status" "description" "result")) nil [59413 59612])
            ("package-menu-package-list" variable nil nil [59614 59758])
            ("package-menu-sort-key" variable nil nil [59760 59844])
            ("package--generate-package-list" function nil nil [59846 62478])
            ("package-menu--version-predicate" function (:arguments ("left" "right")) nil [62480 62735])
            ("package-menu--status-predicate" function (:arguments ("left" "right")) nil [62737 63311])
            ("package-menu--description-predicate" function (:arguments ("left" "right")) nil [63313 63539])
            ("package-menu--name-predicate" function (:arguments ("left" "right")) nil [63541 63659])
            ("package-menu-sort-by-column" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [63661 64177])
            ("package--list-packages" function (:arguments ("packages")) nil [64179 64869])
            ("list-packages" function (:user-visible-flag t) nil [64886 65232])
            ("defalias" code nil nil [65249 65297])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [65299 65532])
            ("package" package nil nil [65534 65552]))          
      :file "package.el"
      :pointmax 65579
      :fsize 65578
      :lastmodtime '(21975 7166 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "session.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("session" package nil nil [4782 4800])
            ("custom" include nil nil [4801 4818])
            ("defunx" function (:arguments ("name" "arglist" "definition")) nil [6043 7549])
            ("cond-emacs-xemacs-macfn" function (:arguments ("args" "msg")) nil [5053 5813])
            ("cond-emacs-xemacs" function (:arguments ("args")) nil [4915 5050])
            ("cl" include nil nil [4899 4912])
            ("minibuffer-local-ns-map" variable nil nil [7666 7698])
            ("yank-menu" variable nil nil [7645 7663])
            ("menu-bar-files-menu" variable nil nil [7614 7642])
            ("put-buffer-names-in-file-menu" variable nil nil [7573 7611])
            ("session-version" variable
               (:constant-flag t
                :default-value "2.3")
                nil [7908 8042])
            ("session" customgroup (:user-visible-flag t) nil [8242 8470])
            ("session-globals" customgroup (:user-visible-flag t) nil [8472 8600])
            ("session-places" customgroup (:user-visible-flag t) nil [8602 8717])
            ("session-miscellaneous" customgroup (:user-visible-flag t) nil [8719 8847])
            ("session-initialize" variable (:default-value t) nil [8849 9682])
            ("session-menu-max-size" variable
               (:user-visible-flag t
                :default-value 36)
                nil [9886 10037])
            ("session-file-menu-max-string" variable
               (:user-visible-flag t
                :default-value (if (if (boundp (quote put-buffer-names-in-file-menu)) put-buffer-names-in-file-menu nil) (cons 50 20) 50))
                nil [10039 10709])
            ("session-edit-menu-max-string" variable
               (:user-visible-flag t
                :default-value 50)
                nil [10711 10969])
            ("session-compact-yank-gap-regexp" variable
               (:user-visible-flag t
                :default-value "\\(
\\|[ 	][ 	][ 	]\\)[ 	
]*")
                nil [10971 11418])
            ("session-menu-permanent-string" variable
               (:user-visible-flag t
                :default-value " *")
                nil [11420 11748])
            ("session-set-file-name-exclude-regexp" variable
               (:user-visible-flag t
                :default-value "[/\\]\\.overview\\|[/\\]\\.session\\|News[/\\]")
                nil [11946 12279])
            ("session-menu-accelerator-support" variable (:default-value (and (featurep (quote menu-accelerator-support)) (fboundp (quote submenu-generate-accelerator-spec)) (quote submenu-generate-accelerator-spec))) nil [12281 12530])
            ("session-abbrev-inhibit-function" variable (:default-value (cond ((fboundp (quote file-remote-p)) (quote file-remote-p)) ((fboundp (quote efs-ftp-path)) (quote efs-ftp-path)) ((fboundp (quote ange-ftp-ftp-name)) (quote ange-ftp-ftp-name)) ((fboundp (quote ange-ftp-ftp-path)) (quote ange-ftp-ftp-path)))) nil [12600 13220])
            ("session-directory-sep-char" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) 92 47)) nil [13222 13400])
            ("session-save-file-coding-system" variable (:default-value (cond-emacs-xemacs :EMACS (quote iso-latin-1-with-esc) :XEMACS (and (featurep (quote mule)) (quote escape-quoted)))) nil [13402 13682])
            ("session-globals-max-size" variable
               (:user-visible-flag t
                :default-value 50)
                nil [13920 14287])
            ("session-globals-max-string" variable
               (:user-visible-flag t
                :default-value 1024)
                nil [14289 14435])
            ("session-registers-max-string" variable
               (:user-visible-flag t
                :default-value 1024)
                nil [14437 14578])
            ("session-save-file" variable (:default-value (expand-file-name ".session" (cond ((boundp (quote user-emacs-directory)) user-emacs-directory) ((boundp (quote user-init-directory)) user-init-directory) (t "~")))) nil [14580 15145])
            ("session-old-save-file" variable (:default-value (expand-file-name ".session" "~")) nil [15147 15211])
            ("session-save-print-spec" variable
               (:user-visible-flag t
                :default-value (quote (t 2 1024)))
                nil [15213 15315])
            ("session-save-file-modes" variable (:default-value 384) nil [15317 15593])
            ("session-before-save-hook" variable nil nil [15597 15799])
            ("session-after-load-save-file-hook" variable (:default-value (cond-emacs-xemacs :EMACS (and (default-boundp (quote yank-menu)) (fboundp (quote menu-bar-update-yank-menu)) (quote (session-refresh-yank-menu))))) nil [15801 16122])
            ("session-globals-regexp" variable (:default-value "-\\(ring\\|history\\)\\'") nil [16124 16409])
            ("session-globals-exclude" variable (:default-value (quote (load-history register-alist vc-comment-ring flyspell-auto-correct-ring planner-browser-file-display-rule-ring))) nil [16411 16744])
            ("session-globals-include" variable (:default-value (quote ((kill-ring 10) (session-file-alist 100 t) (file-name-history 200) search-ring regexp-search-ring))) nil [16746 18008])
            ("session-registers" variable
               (:user-visible-flag t
                :default-value (quote ((48 . 57) 45 61 92 96 region (97 . 122))))
                nil [18220 19263])
            ("session-locals-include" variable (:default-value (quote (overwrite-mode))) nil [19265 19635])
            ("session-locals-predicate" variable (:default-value (quote local-variable-p)) nil [19637 20334])
            ("session-register-swap-out" variable (:default-value (if (fboundp (quote register-swap-out)) (quote register-swap-out) (quote session-register-swap-out))) nil [20336 20679])
            ("session-jump-undo-threshold" variable
               (:user-visible-flag t
                :default-value 240)
                nil [20908 21328])
            ("session-jump-undo-remember" variable
               (:user-visible-flag t
                :default-value 2)
                nil [21330 21554])
            ("session-use-truenames-default" variable
               (:constant-flag t
                :default-value (cond-emacs-xemacs :EMACS (string= (abbreviate-file-name (file-truename "~")) "~") :XEMACS (and (string= (abbreviate-file-name (file-truename "~") t) "~") (if (eq system-type (quote windows-nt)) (quote session-xemacs-buffer-local-mswindows-file-p) t))))
                nil [22265 22565])
            ("session-use-truenames" variable
               (:user-visible-flag t
                :default-value session-use-truenames-default)
                nil [22567 23102])
            ("session-auto-store" variable
               (:user-visible-flag t
                :default-value t)
                nil [23104 23798])
            ("session-undo-check" variable
               (:user-visible-flag t
                :default-value 1)
                nil [23800 24763])
            ("session-kill-buffer-commands" variable
               (:user-visible-flag t
                :default-value (quote (kill-this-buffer)))
                nil [24765 25159])
            ("session-buffer-check-function" variable (:default-value (quote session-default-buffer-check-p)) nil [25161 25943])
            ("session-mode-disable-list" variable
               (:user-visible-flag t
                :default-value (quote (vm-mode gnus-score-mode message-mode tar-mode)))
                nil [25945 26203])
            ("session-mode-enable-list" variable (:user-visible-flag t) nil [26205 26412])
            ("session-name-disable-regexp" variable
               (:user-visible-flag t
                :default-value (concat "\\`" (regexp-quote (if (fboundp (quote temp-directory)) (temp-directory) "/tmp"))))
                nil [26414 26701])
            ("session-name-enable-regexp" variable (:user-visible-flag t) nil [26703 26900])
            ("session-last-change" variable nil nil [27138 27401])
            ("make-variable-buffer-local" code nil nil [27402 27451])
            ("session-file-alist" variable nil nil [27453 28087])
            ("session-jump-to-last-change-counter" variable nil nil [28089 28204])
            ("session-jump-to-last-change-recent" variable nil nil [28206 28315])
            ("session-undo-position" function (:arguments ("num" "pos1" "pos2")) nil [28506 32440])
            ("session-jump-to-last-change" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32457 35468])
            ("defunx" code nil nil [35749 36069])
            ("session-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36071 36332])
            ("session-popup-yank-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [36334 36609])
            ("session-yank-menu-filter" function (:arguments ("menu-items")) nil [36611 37612])
            ("session-yank-string" function (:arguments ("string" "half-len-str" "callback" "active")) nil [37614 38801])
            ("defunx" code nil nil [38836 39277])
            ("session-file-opened-recompute" function nil nil [39471 39564])
            ("session-file-changed-recompute" function (:arguments ("for-opened")) nil [39566 39974])
            ("session-file-opened-menu-filter" function (:arguments ("menu-items")) nil [39976 40238])
            ("session-file-changed-menu-filter" function (:arguments ("menu-items" "files" "find-fn")) nil [40240 42009])
            ("session-file-prune-name" function (:arguments ("elem" "max-string")) nil [42011 43061])
            ("session-menu-maybe-accelerator" function (:arguments ("menu-items" "menu")) nil [43063 43639])
            ("session-abbrev-file-name" function (:arguments ("name")) nil [43641 44124])
            ("session-find-file" function (:arguments ("filename")) nil [44310 44542])
            ("session-set-file-name-history" function nil nil [44544 45306])
            ("session-find-file-hook" function nil nil [45308 46400])
            ("session-kill-buffer-hook" function nil nil [46402 47337])
            ("session-register-swap-out" function nil nil [47549 47956])
            ("session-successful-p" variable nil nil [48173 48277])
            ("session-xemacs-buffer-local-mswindows-file-p" function nil nil [48465 48908])
            ("session-buffer-file-name" function nil nil [48910 49167])
            ("session-toggle-permanent-flag" function
               (:user-visible-flag t
                :arguments ("arg" "check"))
                nil [49391 50268])
            ("session-store-buffer-places" function (:arguments ("arg")) nil [50270 52379])
            ("session-find-file-not-found-hook" function nil nil [52381 52811])
            ("session-default-buffer-check-p" function (:arguments ("buffer")) nil [53026 54198])
            ("session-save-session" function (:user-visible-flag t) nil [54383 57420])
            ("session-save-insert-variable" function (:arguments ("symbol" "val" "spec")) nil [57422 58942])
            ("defunx" code nil nil [58944 59100])
            ("session-save-registers" function nil nil [59102 60127])
            ("session-history-help-string" variable (:default-value (quote (concat (if (device-on-window-system-p) (substitute-command-keys "Click \\<list-mode-map>\\[list-mode-item-mouse-selected] on a history element to select it.
") "") (substitute-command-keys "In this buffer, type RET to select the element near point.

")))) nil [60347 60721])
            ("session-minibuffer-history-help" function (:user-visible-flag t) nil [60723 61505])
            ("defunx" code nil nil [61507 61624])
            ("defunx" code nil nil [61937 63058])
            ("defunx" code nil nil [63060 63791])
            ("defunx" code nil nil [63793 65149])
            ("session-initialize-do" function nil nil [65151 67573])
            ("session-initialize-and-set" function (:arguments ("symbol" "value")) nil [67575 68059])
            ("session-use-package" variable nil nil [68173 68616])
            ("session-initialize" function (:user-visible-flag t) nil [68633 69044]))          
      :file "session.el"
      :pointmax 69113
      :fsize 69112
      :lastmodtime '(19722 23414 0 0)
      :unmatched-syntax '((close-paren 7698 . 7699) (symbol 7553 . 7570) (open-paren 7552 . 7553) (close-paren 7549 . 7550) (symbol 4879 . 4896) (open-paren 4878 . 4879)))
    (semanticdb-table "auto-complete-clang.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("auto-complete-clang" package nil nil [1127 1157])
            ("auto-complete" include nil nil [1158 1182])
            ("ac-clang-executable" variable
               (:user-visible-flag t
                :default-value (executable-find "clang"))
                nil [1185 1316])
            ("ac-clang-auto-save" variable (:user-visible-flag t) nil [1318 1747])
            ("ac-clang-lang-option-function" variable (:user-visible-flag t) nil [1749 1889])
            ("ac-clang-flags" variable nil nil [1937 2176])
            ("ac-clang-prefix-header" variable nil nil [2236 2271])
            ("ac-clang-set-prefix-header" function (:arguments ("ph")) nil [2305 2810])
            ("ac-clang-set-cflags" function (:user-visible-flag t) nil [2843 3004])
            ("ac-clang-set-cflags-from-shell-command" function (:user-visible-flag t) nil [3051 3419])
            ("ac-clang-completion-pattern" variable
               (:constant-flag t
                :default-value "^COMPLETION: \\(%s[^ 
:]*\\)\\(?: : \\)*\\(.*$\\)")
                nil [3421 3515])
            ("ac-clang-error-buffer-name" variable
               (:constant-flag t
                :default-value "*clang error*")
                nil [3517 3570])
            ("ac-clang-parse-output" function (:arguments ("prefix")) nil [3572 4679])
            ("ac-clang-handle-error" function (:arguments ("res" "args")) nil [4682 5621])
            ("ac-clang-call-process" function (:arguments ("prefix" "args")) nil [5623 6205])
            ("ac-clang-build-location" function (:arguments ("pos")) nil [6208 6432])
            ("ac-clang-lang-option" function nil nil [6434 6923])
            ("ac-clang-build-complete-args" function (:arguments ("pos")) nil [6925 7387])
            ("ac-clang-clean-document" function (:arguments ("s")) nil [7390 7558])
            ("ac-clang-document" function (:arguments ("item")) nil [7560 7775])
            ("ac-clang-candidate-face" variable
               (:default-value (quote ((t (:background "lightgray" :foreground "navy"))))
                :type "face")
                nil [7778 7918])
            ("ac-clang-selection-face" variable
               (:default-value (quote ((t (:background "navy" :foreground "white"))))
                :type "face")
                nil [7920 8070])
            ("ac-in-string/comment" function nil nil [8072 8197])
            ("ac-clang-candidate" function nil nil [8199 8521])
            ("ac-template-start-point" variable nil nil [8524 8560])
            ("ac-template-candidates" variable (:default-value (list "ok" "no" "yes:)")) nil [8561 8617])
            ("ac-clang-action" function nil nil [8619 10953])
            ("ac-clang-prefix" function nil nil [10955 11320])
            ("ac-define-source" code nil nil [11322 11626])
            ("ac-clang-same-count-in-string" function (:arguments ("c1" "c2" "s")) nil [11628 11939])
            ("ac-clang-split-args" function (:arguments ("s")) nil [11941 12582])
            ("ac-template-candidate" function nil nil [12585 12642])
            ("ac-template-action" function nil nil [12644 15421])
            ("ac-template-prefix" function nil nil [15424 15479])
            ("ac-define-source" code nil nil [15528 15750]))          
      :file "auto-complete-clang.el"
      :pointmax 15789
      :fsize 15788
      :lastmodtime '(21316 32166 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ede-projects.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("anonymous" code nil nil [82 85]))          
      :file "ede-projects.el"
      :pointmax 86
      :fsize 85
      :lastmodtime '(21711 38049 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "rtags.el"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file "rtags.el"
      :pointmax 185711
      :fsize 185710
      :lastmodtime '(22285 3924 459374 357000)
      :unmatched-syntax nil))
  :file "!home!marselo!.emacs.d!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
