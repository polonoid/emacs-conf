;; Object yasnippet-20150415.244/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "yasnippet-20150415.244/"
  :tables
  (list
    (semanticdb-table "yasnippet.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4748 4761])
            ("cl-lib" include nil nil [4762 4779])
            ("easymenu" include nil nil [4780 4799])
            ("help-mode" include nil nil [4800 4820])
            ("yas--editing-template" variable nil nil [4822 4852])
            ("yas--guessed-modes" variable nil nil [4853 4880])
            ("yas--indent-original-column" variable nil nil [4881 4917])
            ("yas--scheduled-jit-loads" variable nil nil [4918 4951])
            ("yas-keymap" variable nil nil [4952 4971])
            ("yas-selected-text" variable nil nil [4972 4998])
            ("yas-verbosity" variable nil nil [4999 5021])
            ("yas--current-template" variable nil nil [5022 5052])
            ("yasnippet" customgroup (:user-visible-flag t) nil [5089 5182])
            ("yas-installed-snippets-dir" variable nil nil [5184 5223])
            ("setq" code nil nil [5224 5350])
            ("yas-snippet-dirs" variable (:default-value (remove nil (list "~/.emacs.d/snippets" (quote yas-installed-snippets-dir)))) nil [5352 6366])
            ("yas-snippet-dirs" function nil nil [6368 6899])
            ("defvaralias" code nil nil [6901 6952])
            ("yas-new-snippet-default" variable (:default-value "# -*- mode: snippet; require-final-newline: nil -*-
# name: $1
# key: ${2:${1:$(yas--key-from-desc yas-text)}}${3:
# binding: ${4:direct-keybinding}}
# --
$0") nil [6954 7274])
            ("yas-prompt-functions" variable (:default-value (quote (yas-x-prompt yas-dropdown-prompt yas-completing-prompt yas-ido-prompt yas-no-prompt))) nil [7276 8278])
            ("yas-indent-line" variable (:default-value (quote auto)) nil [8280 8839])
            ("yas-also-auto-indent-first-line" variable nil nil [8841 9053])
            ("yas-snippet-revival" variable (:default-value t) nil [9055 9187])
            ("yas-triggers-in-field" variable nil nil [9189 9408])
            ("yas-fallback-behavior" variable (:default-value (quote call-other-command)) nil [9410 10077])
            ("yas-choose-keys-first" variable nil nil [10079 10334])
            ("yas-choose-tables-first" variable nil nil [10336 10636])
            ("yas-use-menu" variable (:default-value (quote abbreviate)) nil [10638 11217])
            ("yas-trigger-symbol" variable (:default-value (or (and (eq window-system (quote mac)) (ignore-errors (char-to-string 8677))) " =>")) nil [11219 11565])
            ("yas-wrap-around-region" variable nil nil [11567 11814])
            ("yas-good-grace" variable (:default-value t) nil [11816 11998])
            ("yas-visit-from-menu" variable nil nil [12000 12205])
            ("yas-expand-only-for-last-commands" variable nil nil [12207 12743])
            ("yas-field-highlight-face" variable
               (:default-value (quote ((t (:inherit (quote region)))))
                :type "face")
                nil [12809 12962])
            ("yas--field-debug-face" variable
               (:default-value (quote nil)
                :type "face")
                nil [12964 13083])
            ("yas-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(tab)] (quote yas-next-field-or-maybe-expand)) (define-key map (kbd "TAB") (quote yas-next-field-or-maybe-expand)) (define-key map [(shift tab)] (quote yas-prev-field)) (define-key map [backtab] (quote yas-prev-field)) (define-key map (kbd "C-g") (quote yas-abort-snippet)) (define-key map (kbd "C-d") (quote yas-skip-and-clear-or-delete-char)) map)) nil [13115 13728])
            ("yas-key-syntaxes" variable (:default-value (list "w" "w_" "w_." "w_.()" (function yas-try-key-from-whitespace))) nil [13730 15339])
            ("yas-after-exit-snippet-hook" variable (:default-value (quote nil)) nil [15341 15695])
            ("yas-before-expand-snippet-hook" variable (:default-value (quote nil)) nil [15697 15792])
            ("yas-buffer-local-condition" variable (:default-value (quote (if (and (or (fourth (syntax-ppss)) (fifth (syntax-ppss))) this-command (eq this-command (quote yas-expand-from-trigger-key))) (quote (require-snippet-condition . force-in-comment)) t))) nil [15794 17802])
            ("yas--version" variable (:default-value "0.8.0beta") nil [17830 17863])
            ("yas--menu-table" variable (:default-value (make-hash-table)) nil [17865 17963])
            ("yas--escaped-characters" variable (:default-value (quote (92 96 34 39 36 125 123 40 41))) nil [17965 18090])
            ("yas--field-regexp" variable
               (:constant-flag t
                :default-value "${\\([0-9]+:\\)?\\([^}]*\\)}")
                nil [18092 18197])
            ("yas--multi-dollar-lisp-expression-regexp" variable
               (:constant-flag t
                :default-value "$+[ 	
]*\\(([^)]*)\\)")
                nil [18199 18338])
            ("yas--backquote-lisp-expression-regexp" variable
               (:constant-flag t
                :default-value "`\\([^`]*\\)`")
                nil [18340 18469])
            ("yas--transform-mirror-regexp" variable
               (:constant-flag t
                :default-value "${\\(?:\\([0-9]+\\):\\)?$\\([ 	
]*([^}]*\\)")
                nil [18471 18622])
            ("yas--simple-mirror-regexp" variable
               (:constant-flag t
                :default-value "$\\([0-9]+\\)")
                nil [18624 18721])
            ("yas--snippet-id-seed" variable nil nil [18723 18794])
            ("yas--snippet-next-id" function nil nil [18796 18905])
            ("last-buffer-undo-list" variable nil nil [19008 19042])
            ("yas--minor-mode-menu" variable nil nil [19044 19107])
            ("yas-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(tab)] (quote yas-expand)) (define-key map (kbd "TAB") (quote yas-expand)) (define-key map "&" (quote yas-insert-snippet)) (define-key map "&" (quote yas-new-snippet)) (define-key map "&" (quote yas-visit-snippet-file)) map)) nil [19109 19484])
            ("easy-menu-define" code nil nil [19486 24716])
            ("yas--extra-modes" variable nil nil [24718 24928])
            ("define-obsolete-variable-alias" code nil nil [24929 25004])
            ("yas--tables" variable (:default-value (make-hash-table)) nil [25006 25102])
            ("yas--parents" variable (:default-value (make-hash-table)) nil [25104 25496])
            ("yas--direct-keymaps" variable (:default-value (list)) nil [25498 26004])
            ("yas-direct-keymaps-reload" function (:user-visible-flag t) nil [26006 26386])
            ("yas--modes-to-activate" function nil nil [26388 27246])
            ("yas-minor-mode-hook" variable nil nil [27248 27329])
            ("define-minor-mode" code nil nil [27346 28871])
            ("yas-activate-extra-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [28873 29502])
            ("yas-deactivate-extra-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [29504 29843])
            ("yas-dont-activate" variable (:default-value (quote (minibufferp))) nil [29845 30570])
            ("unless" code nil nil [30571 30679])
            ("yas-minor-mode-on" function (:user-visible-flag t) nil [30682 31081])
            ("define-globalized-minor-mode" code nil nil [31098 31219])
            ("yas--global-mode-reload-with-jit-maybe" function nil nil [31221 31367])
            ("add-hook" code nil nil [31369 31441])
            ("yas--font-lock-keywords" variable (:default-value (append (quote (("^#.*$" . font-lock-comment-face))) lisp-font-lock-keywords-2 (quote (("$\\([0-9]+\\)" (0 font-lock-keyword-face) (1 font-lock-string-face t)) ("${\\([0-9]+\\):?" (0 font-lock-keyword-face) (1 font-lock-warning-face t)) ("${" . font-lock-keyword-face) ("$[0-9]+?" . font-lock-preprocessor-face) ("\\(\\$(\\)" 1 font-lock-preprocessor-face) ("}" (0 font-lock-keyword-face)))))) nil [31467 32025])
            ("snippet-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (easy-menu-define nil map "Menu used when snippet-mode is active." (cons "Snippet" (mapcar (function (lambda (ent) (when (third ent) (define-key map (third ent) (second ent))) (vector (first ent) (second ent) t))) (quote (("Load this snippet" yas-load-snippet-buffer "") ("Load and quit window" yas-load-snippet-buffer-and-close "") ("Try out this snippet" yas-tryout-snippet "")))))) map)) nil [32027 32713])
            ("define-derived-mode" code nil nil [32716 33026])
            ("yas--template" type
               (:members ("key" "content" "name" "condition" "expand-env" "file" "keybinding" "uuid" "menu-binding-pair" "group" "perm-group" "table")
                :type "struct")
                nil [33077 33396])
            ("yas--table" type
               (:members ("name" "hash" "uuidhash" "parents" "direct-keymap")
                :type "struct")
                nil [33398 34597])
            ("yas--get-template-by-uuid" function (:arguments ("mode" "uuid")) nil [34599 34812])
            ("yas--remove-template-by-uuid" function (:arguments ("table" "uuid")) nil [36679 37821])
            ("yas--add-template" function (:arguments ("table" "template")) nil [37823 38793])
            ("yas--update-template" function (:arguments ("table" "template")) nil [38795 39189])
            ("yas--update-template-menu" function (:arguments ("table" "template")) nil [39191 41139])
            ("yas--namehash-templates-alist" function (:arguments ("namehash")) nil [41141 41342])
            ("yas--fetch" function (:arguments ("table" "key")) nil [41344 41725])
            ("yas--eval-condition" function (:arguments ("condition")) nil [41760 42059])
            ("yas--filter-templates-by-condition" function (:arguments ("templates")) nil [42062 42723])
            ("yas--require-template-specific-condition-p" function nil nil [42725 43438])
            ("yas--template-can-expand-p" function (:arguments ("condition" "requirement")) nil [43440 43753])
            ("yas--table-templates" function (:arguments ("table")) nil [43755 44117])
            ("yas--templates-for-key-at-point" function nil nil [44119 45637])
            ("yas--table-all-keys" function (:arguments ("table")) nil [45639 45965])
            ("yas--table-mode" function (:arguments ("table")) nil [45967 46033])
            ("yas--handle-error" function (:arguments ("err")) nil [46073 46287])
            ("yas--eval-lisp" function (:arguments ("form")) nil [46289 46939])
            ("yas--eval-lisp-no-saves" function (:arguments ("form")) nil [46941 47071])
            ("yas--read-lisp" function (:arguments ("string" "nil-on-error")) nil [47073 47441])
            ("yas--read-keybinding" function (:arguments ("keybinding")) nil [47443 48001])
            ("yas--table-get-create" function (:arguments ("mode")) nil [48003 48442])
            ("yas--get-snippet-tables" function nil nil [48444 48776])
            ("yas--menu-keymap-get-create" function (:arguments ("mode" "parents")) nil [48778 49359])
            ("yas--called-interactively-p" function (:arguments ("kind")) nil [49362 49675])
            ("yas--parse-template" function (:arguments ("file")) nil [49731 52837])
            ("yas--calculate-group" function (:arguments ("file")) nil [52839 53707])
            ("yas--subdirs" function (:arguments ("directory" "filep")) nil [53709 54332])
            ("yas--make-menu-binding" function (:arguments ("template")) nil [54334 54543])
            ("yas--expand-or-visit-from-menu" function (:arguments ("mode" "uuid")) nil [54545 55288])
            ("yas--key-from-desc" function (:arguments ("text")) nil [55290 55437])
            ("yas--prompt-for-template" function (:arguments ("templates" "prompt")) nil [55480 56098])
            ("yas--prompt-for-keys" function (:arguments ("keys" "prompt")) nil [56100 56394])
            ("yas--prompt-for-table" function (:arguments ("tables" "prompt")) nil [56396 56758])
            ("yas-x-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [56760 57385])
            ("yas-ido-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [57387 57620])
            ("yas-dropdown-prompt" function (:arguments ("_prompt" "choices" "display-fn")) nil [57622 57921])
            ("yas-completing-prompt" function (:arguments ("prompt" "choices" "display-fn" "completion-fn")) nil [57923 58411])
            ("yas-no-prompt" function (:arguments ("_prompt" "choices" "_display-fn")) nil [58413 58492])
            ("yas--creating-compiled-snippets" variable nil nil [58617 58661])
            ("yas--define-snippets-1" function (:arguments ("snippet" "snippet-table")) nil [58663 60227])
            ("yas-define-snippets" function (:arguments ("mode" "snippets")) nil [60229 62554])
            ("yas--load-yas-setup-file" function (:arguments ("file")) nil [62591 62966])
            ("yas--define-parents" function (:arguments ("mode" "parents")) nil [62968 63205])
            ("yas-load-directory" function
               (:user-visible-flag t
                :arguments ("top-level-dir" "use-jit" "interactive"))
                nil [63207 65639])
            ("yas--load-directory-1" function (:arguments ("directory" "mode-sym")) nil [65641 66637])
            ("yas--load-directory-2" function (:arguments ("directory" "mode-sym")) nil [66639 67444])
            ("yas--load-snippet-dirs" function (:arguments ("nojit")) nil [67446 68157])
            ("yas-reload-all" function
               (:user-visible-flag t
                :arguments ("no-jit" "interactive"))
                nil [68159 70766])
            ("yas-after-reload-hook" variable nil nil [70768 70840])
            ("yas--load-pending-jits" function nil nil [70842 71222])
            ("yas--quote-string" function (:arguments ("string")) nil [71333 71635])
            ("yas-compile-directory" function
               (:user-visible-flag t
                :arguments ("top-level-dir"))
                nil [71672 72005])
            ("yas-recompile-all" function (:user-visible-flag t) nil [72007 72148])
            ("yas--scheduled-jit-loads" variable (:default-value (make-hash-table)) nil [72172 72303])
            ("yas--schedule-jit" function (:arguments ("mode" "fun")) nil [72305 72394])
            ("yas-about" function nil nil [72430 72629])
            ("yas--template-menu-binding-pair-get-create" function (:arguments ("template" "type")) nil [74032 74753])
            ("yas--template-menu-managed-by-yas-define-menu" function (:arguments ("template")) nil [74754 74948])
            ("yas--show-menu-p" function (:arguments ("mode")) nil [74951 75212])
            ("yas--delete-from-keymap" function (:arguments ("keymap" "uuid")) nil [75214 76181])
            ("yas-define-menu" function (:arguments ("mode" "menu" "omit-items")) nil [76183 77490])
            ("yas--define-menu-1" function (:arguments ("table" "menu-keymap" "menu" "uuidhash" "group-list")) nil [77492 78872])
            ("yas--define" function (:arguments ("mode" "key" "template" "name" "condition" "group")) nil [78875 79350])
            ("yas-hippie-try-expand" function (:arguments ("first-time?")) nil [79352 79643])
            ("yas--condition-cache-timestamp" variable nil nil [79691 79734])
            ("yas-define-condition-cache" function (:arguments ("func" "doc" "body")) nil [79735 80765])
            ("defalias" code nil nil [80767 80818])
            ("yas-expand-from-trigger-key" function
               (:user-visible-flag t
                :arguments ("field"))
                nil [80819 82013])
            ("yas-expand-from-keymap" function (:user-visible-flag t) nil [82015 82776])
            ("yas--expand-or-prompt-for-template" function (:arguments ("templates" "start" "end")) nil [82778 83527])
            ("yas--fallback" function nil nil [83823 85702])
            ("yas--keybinding-beyond-yasnippet" function nil nil [85704 86010])
            ("yas--fallback-translate-input" function (:arguments ("keys")) nil [86012 86982])
            ("yas--all-templates" function (:arguments ("tables")) nil [87022 87759])
            ("yas-insert-snippet" function
               (:user-visible-flag t
                :arguments ("no-condition"))
                nil [87761 89066])
            ("yas-visit-snippet-file" function (:user-visible-flag t) nil [89068 89817])
            ("yas--visit-snippet-file-1" function (:arguments ("template")) nil [89819 91375])
            ("yas--guess-snippet-directories-1" function (:arguments ("table")) nil [91377 91674])
            ("yas--guess-snippet-directories" function (:arguments ("table")) nil [91676 92788])
            ("yas--make-directory-maybe" function (:arguments ("table-and-dirs" "main-table-string")) nil [92790 93899])
            ("yas-new-snippet" function
               (:user-visible-flag t
                :arguments ("no-template"))
                nil [93901 94653])
            ("yas--compute-major-mode-and-parents" function (:arguments ("file")) nil [94655 96329])
            ("yas--editing-template" variable nil nil [96331 96445])
            ("yas--current-template" variable nil nil [96447 96543])
            ("yas--guessed-modes" variable nil nil [96545 96640])
            ("yas--read-table" function nil nil [96642 97498])
            ("yas-load-snippet-buffer" function
               (:user-visible-flag t
                :arguments ("table" "interactive"))
                nil [97500 98858])
            ("yas-load-snippet-buffer-and-close" function
               (:user-visible-flag t
                :arguments ("table" "kill"))
                nil [98860 100995])
            ("yas-tryout-snippet" function
               (:user-visible-flag t
                :arguments ("debug"))
                nil [100997 102956])
            ("yas-active-keys" function nil nil [102958 103176])
            ("yas--template-fine-group" function (:arguments ("template")) nil [103178 103325])
            ("yas-describe-tables" function
               (:user-visible-flag t
                :arguments ("choose"))
                nil [103327 105723])
            ("yas--describe-pretty-table" function (:arguments ("table" "original-buffer")) nil [105725 108321])
            ("yas-try-key-from-whitespace" function (:arguments ("_start-point")) nil [108391 108669])
            ("yas-shortest-key-until-whitespace" function (:arguments ("_start-point")) nil [108671 108874])
            ("yas-longest-key-from-whitespace" function (:arguments ("start-point")) nil [108876 109284])
            ("yas-modified-p" variable nil nil [109355 109448])
            ("yas-moving-away-p" variable nil nil [109450 109524])
            ("yas-text" variable nil nil [109526 109580])
            ("yas-substr" function (:arguments ("str" "pattern" "subexp")) nil [109582 109949])
            ("yas-choose-value" function (:arguments ("possibilities")) nil [109951 110489])
            ("yas-key-to-value" function (:arguments ("alist")) nil [110491 110733])
            ("yas-throw" function (:arguments ("text")) nil [110735 110865])
            ("yas-verify-value" function (:arguments ("possibilities")) nil [110867 111159])
            ("yas-field-value" function (:arguments ("number")) nil [111161 111496])
            ("yas-text" function nil nil [111498 111658])
            ("yas-selected-text" function nil nil [111660 111865])
            ("yas--get-field-once" function (:arguments ("number" "transform-fn")) nil [111867 112061])
            ("yas-default-from-field" function (:arguments ("number")) nil [112063 112157])
            ("yas-inside-string" function nil nil [112159 112334])
            ("yas-unimplemented" function (:arguments ("missing-feature")) nil [112336 112757])
            ("yas--active-field-overlay" variable nil nil [112805 112884])
            ("yas--field-protection-overlays" variable nil nil [112886 112980])
            ("yas-selected-text" variable nil nil [112982 113075])
            ("yas--start-column" variable nil nil [113077 113159])
            ("make-variable-buffer-local" code nil nil [113161 113216])
            ("make-variable-buffer-local" code nil nil [113217 113277])
            ("put" code nil nil [113278 113329])
            ("put" code nil nil [113330 113386])
            ("yas--snippet" type
               (:members ("fields" "exit" "id" "control-overlay" "active-field" "previous-active-field" "force-exit")
                :type "struct")
                nil [113388 113739])
            ("yas--field" type
               (:members ("number" "start" "end" "parent-field" "mirrors" "transform" "modified-p" "next")
                :type "struct")
                nil [113741 114297])
            ("yas--mirror" type
               (:members ("start" "end" "transform" "parent-field" "next" "depth")
                :type "struct")
                nil [114300 114756])
            ("yas--exit" type
               (:members ("marker" "next")
                :type "struct")
                nil [114758 114836])
            ("yas--apply-transform" function (:arguments ("field-or-mirror" "field" "empty-on-nil-p")) nil [114838 115926])
            ("yas--replace-all" function (:arguments ("from" "to" "text")) nil [115928 116253])
            ("yas--snippet-find-field" function (:arguments ("snippet" "number")) nil [116255 116428])
            ("yas--snippet-sort-fields" function (:arguments ("snippet")) nil [116430 116651])
            ("yas--snippet-field-compare" function (:arguments ("field1" "field2")) nil [116653 117231])
            ("yas--field-probably-deleted-p" function (:arguments ("snippet" "field")) nil [117233 118001])
            ("yas--snippets-at-point" function (:arguments ("all-snippets")) nil [118003 118630])
            ("yas-next-field-or-maybe-expand" function (:user-visible-flag t) nil [118632 119079])
            ("yas-next-field" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [119081 120557])
            ("yas--place-overlays" function (:arguments ("snippet" "field")) nil [120559 120765])
            ("yas--move-to-field" function (:arguments ("snippet" "field")) nil [120767 121675])
            ("yas-prev-field" function (:user-visible-flag t) nil [121677 121804])
            ("yas-abort-snippet" function (:arguments ("snippet")) nil [121806 122020])
            ("yas-exit-snippet" function
               (:user-visible-flag t
                :arguments ("snippet"))
                nil [122022 122394])
            ("yas-exit-all-snippets" function (:user-visible-flag t) nil [122396 122623])
            ("yas--inhibit-overlay-hooks" variable nil nil [122665 122786])
            ("yas--inhibit-overlay-hooks" function (:arguments ("body")) nil [122788 122972])
            ("yas-snippet-beg" variable nil nil [122974 123054])
            ("yas-snippet-end" variable nil nil [123055 123129])
            ("yas--commit-snippet" function (:arguments ("snippet")) nil [123131 124767])
            ("yas--safely-run-hooks" function (:arguments ("hook-var")) nil [124769 124948])
            ("yas--check-commit-snippet" function nil nil [124951 126443])
            ("yas--markers-to-points" function (:arguments ("snippet")) nil [126920 128286])
            ("yas--points-to-markers" function (:arguments ("snippet")) nil [128288 129449])
            ("yas--field-contains-point-p" function (:arguments ("field" "point")) nil [129451 129655])
            ("yas--field-text-for-display" function (:arguments ("field")) nil [129657 129826])
            ("yas--undo-in-progress" function nil nil [129828 129990])
            ("yas--make-control-overlay" function (:arguments ("snippet" "start" "end")) nil [129992 130449])
            ("yas-skip-and-clear-or-delete-char" function
               (:user-visible-flag t
                :arguments ("field"))
                nil [130451 131158])
            ("yas--skip-and-clear" function (:arguments ("field")) nil [131160 131604])
            ("yas--mark-this-and-children-modified" function (:arguments ("field")) nil [131606 131987])
            ("yas--make-move-active-field-overlay" function (:arguments ("snippet" "field")) nil [131989 133096])
            ("yas--on-field-overlay-modification" function (:arguments ("overlay" "after?" "_beg" "_end" "_length")) nil [133098 134240])
            ("yas--make-move-field-protection-overlays" function (:arguments ("snippet" "field")) nil [134667 136147])
            ("yas--on-protection-overlay-modification" function (:arguments ("_overlay" "after?" "_beg" "_end" "_length")) nil [136149 136675])
            ("add-to-list" code nil nil [136677 136740])
            ("yas-expand-snippet" function (:arguments ("content" "start" "end" "expand-env")) nil [137874 142812])
            ("yas--take-care-of-redo" function (:arguments ("_beg" "_end" "snippet")) nil [142814 143146])
            ("yas--snippet-revive" function (:arguments ("beg" "end" "snippet")) nil [143148 144195])
            ("yas--snippet-create" function (:arguments ("begin" "end")) nil [144197 144808])
            ("yas--fom-start" function (:arguments ("fom")) nil [145581 145778])
            ("yas--fom-end" function (:arguments ("fom")) nil [145780 145971])
            ("yas--fom-next" function (:arguments ("fom")) nil [145973 146165])
            ("yas--fom-parent-field" function (:arguments ("fom")) nil [146167 146366])
            ("yas--calculate-adjacencies" function (:arguments ("snippet")) nil [146368 147612])
            ("yas--calculate-mirrors-in-fields" function (:arguments ("snippet" "mirror")) nil [147614 148375])
            ("yas--advance-end-maybe" function (:arguments ("fom" "newend")) nil [148377 149112])
            ("yas--advance-start-maybe" function (:arguments ("fom" "newstart")) nil [149114 149417])
            ("yas--advance-end-of-parents-maybe" function (:arguments ("field" "newend")) nil [149419 149853])
            ("yas--dollar-regions" variable nil nil [149855 149977])
            ("yas--backquote-markers-and-strings" variable nil nil [149979 150158])
            ("yas--snippet-parse-create" function (:arguments ("snippet")) nil [150160 151612])
            ("yas--indent-according-to-mode" function (:arguments ("snippet-markers")) nil [151614 153132])
            ("yas--indent-original-column" variable nil nil [153134 153174])
            ("yas--indent" function (:arguments ("snippet")) nil [153175 154446])
            ("yas--collect-snippet-markers" function (:arguments ("snippet")) nil [154448 155073])
            ("yas--real-line-beginning" function nil nil [155075 155311])
            ("yas--escape-string" function (:arguments ("escaped")) nil [155313 155409])
            ("yas--protect-escapes" function (:arguments ("text" "escaped")) nil [155411 156001])
            ("yas--restore-escapes" function (:arguments ("text" "escaped")) nil [156003 156583])
            ("yas--save-backquotes" function nil nil [156585 157454])
            ("yas--restore-backquotes" function nil nil [157456 157982])
            ("yas--scan-sexps" function (:arguments ("from" "count")) nil [157984 158144])
            ("yas--make-marker" function (:arguments ("pos")) nil [158146 158341])
            ("yas--field-parse-create" function (:arguments ("snippet" "parent-field")) nil [158343 162287])
            ("yas--transform-mirror-parse-create" function (:arguments ("snippet")) nil [162289 163544])
            ("yas--simple-mirror-parse-create" function (:arguments ("snippet")) nil [163546 165521])
            ("yas--delete-regions" function (:arguments ("regions")) nil [165523 165799])
            ("yas--calculate-mirror-depth" function (:arguments ("mirror" "traversed")) nil [165801 166726])
            ("yas--update-mirrors" function (:arguments ("snippet")) nil [166728 168829])
            ("yas--mirror-update-display" function (:arguments ("mirror" "field")) nil [168831 169966])
            ("yas--field-update-display" function (:arguments ("field")) nil [169968 170883])
            ("yas--post-command-handler" function nil nil [170913 171979])
            ("put" code nil nil [172096 172181])
            ("yas--expand-from-trigger-key-doc" function (:arguments ("context")) nil [172182 173186])
            ("put" code nil nil [173188 173279])
            ("yas--expand-from-keymap-doc" function (:arguments ("context")) nil [173280 174438])
            ("yas--template-pretty-list" function (:arguments ("templates")) nil [174440 174760])
            ("define-button-type" code nil nil [174762 174965])
            ("yas--snippet-description-finish-runonce" function nil nil [174967 175198])
            ("yas--create-snippet-xrefs" function nil nil [175200 175679])
            ("yas-verbosity" variable (:default-value 4) nil [175693 175796])
            ("yas--message" function (:arguments ("level" "message" "args")) nil [175798 176001])
            ("yas--warning" function (:arguments ("format-control" "format-args")) nil [176003 176189])
            ("yas--format" function (:arguments ("format-control" "format-args")) nil [176191 176309])
            ("unless" code nil nil [176447 179028])
            ("yas-initialize" function nil nil [179080 179257])
            ("yas--backported-syms" variable (:default-value (quote (yas-snippet-dirs yas-prompt-functions yas-indent-line yas-also-auto-indent-first-line yas-snippet-revival yas-triggers-in-field yas-fallback-behavior yas-choose-keys-first yas-choose-tables-first yas-use-menu yas-trigger-symbol yas-wrap-around-region yas-good-grace yas-visit-from-menu yas-expand-only-for-last-commands yas-field-highlight-face yas-keymap yas-verbosity yas-extra-modes yas-key-syntaxes yas-after-exit-snippet-hook yas-before-expand-snippet-hook yas-buffer-local-condition yas-dont-activate yas-x-prompt yas-ido-prompt yas-no-prompt yas-completing-prompt yas-dropdown-prompt yas-expand yas-minor-mode yas-global-mode yas-direct-keymaps-reload yas-minor-mode-on yas-load-directory yas-reload-all yas-compile-directory yas-recompile-all yas-about yas-expand-from-trigger-key yas-expand-from-keymap yas-insert-snippet yas-visit-snippet-file yas-new-snippet yas-load-snippet-buffer yas-tryout-snippet yas-describe-tables yas-next-field-or-maybe-expand yas-next-field yas-prev-field yas-abort-snippet yas-exit-snippet yas-exit-all-snippets yas-skip-and-clear-or-delete-char yas-initialize yas-expand-snippet yas-define-snippets yas-define-menu yas-snippet-beg yas-snippet-end yas-modified-p yas-moving-away-p yas-substr yas-choose-value yas-key-to-value yas-throw yas-verify-value yas-field-value yas-text yas-selected-text yas-default-from-field yas-inside-string yas-unimplemented yas-define-condition-cache yas-hippie-try-expand))) nil [179259 184141])
            ("dolist" code nil nil [184143 184501])
            ("yas--exported-syms" variable (:default-value (let (exported) (mapatoms (lambda (atom) (if (and (or (and (boundp atom) (not (get atom (quote byte-obsolete-variable)))) (and (fboundp atom) (not (get atom (quote byte-obsolete-info))))) (string-match-p "^yas-[^-]" (symbol-name atom))) (push atom exported)))) exported)) nil [184503 185155])
            ("yasnippet" package nil nil [185159 185179]))          
      :file "yasnippet.el"
      :pointmax 185322
      :fsize 185325
      :lastmodtime '(21918 12511 0 0)
      :unmatched-syntax nil))
  :file "!home!marselo!.emacs.d!elpa!yasnippet-20150415.244!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
