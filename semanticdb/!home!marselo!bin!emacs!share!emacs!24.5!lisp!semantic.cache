;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "help-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" include nil nil [1059 1076])
            ("easymenu" include nil nil [1096 1115])
            ("help-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (make-composed-keymap button-buffer-map special-mode-map)) (define-key map [mouse-2] (quote help-follow-mouse)) (define-key map "l" (quote help-go-back)) (define-key map "r" (quote help-go-forward)) (define-key map "" (quote help-go-back)) (define-key map "" (quote help-go-forward)) (define-key map [XF86Back] (quote help-go-back)) (define-key map [XF86Forward] (quote help-go-forward)) (define-key map "" (quote help-follow-symbol)) (define-key map "" (quote help-follow)) map)) nil [1118 1761])
            ("easy-menu-define" code nil nil [1763 2339])
            ("help-xref-stack" variable nil nil [2341 2611])
            ("put" code nil nil [2612 2653])
            ("make-variable-buffer-local" code nil nil [2654 2699])
            ("help-xref-forward-stack" variable nil nil [2701 2976])
            ("put" code nil nil [2977 3026])
            ("make-variable-buffer-local" code nil nil [3027 3080])
            ("help-xref-stack-item" variable nil nil [3082 3226])
            ("put" code nil nil [3227 3273])
            ("make-variable-buffer-local" code nil nil [3274 3324])
            ("help-xref-stack-forward-item" variable nil nil [3326 3472])
            ("put" code nil nil [3473 3527])
            ("make-variable-buffer-local" code nil nil [3528 3586])
            ("setq-default" code nil nil [3588 3647])
            ("setq-default" code nil nil [3648 3723])
            ("help-mode-hook" variable nil nil [3725 3813])
            ("define-button-type" code nil nil [3846 3925])
            ("help-button-action" function (:arguments ("button")) nil [3927 4104])
            ("define-button-type" code nil nil [4276 4434])
            ("define-button-type" code nil nil [4436 4594])
            ("define-button-type" code nil nil [4596 4742])
            ("define-button-type" code nil nil [4744 4917])
            ("define-button-type" code nil nil [4919 5089])
            ("define-button-type" code nil nil [5091 5264])
            ("define-button-type" code nil nil [5313 5469])
            ("define-button-type" code nil nil [5471 5635])
            ("define-button-type" code nil nil [5637 5808])
            ("define-button-type" code nil nil [5810 6041])
            ("define-button-type" code nil nil [6043 6182])
            ("define-button-type" code nil nil [6184 6335])
            ("define-button-type" code nil nil [6337 6523])
            ("define-button-type" code nil nil [6525 6699])
            ("define-button-type" code nil nil [6701 7338])
            ("define-button-type" code nil nil [7340 7980])
            ("define-button-type" code nil nil [7982 8450])
            ("define-button-type" code nil nil [8452 8981])
            ("define-button-type" code nil nil [8983 9133])
            ("define-button-type" code nil nil [9135 9307])
            ("define-button-type" code nil nil [9309 9454])
            ("define-button-type" code nil nil [9456 9619])
            ("define-button-type" code nil nil [9621 9924])
            ("bookmark-make-record-function" variable nil nil [9928 9966])
            ("define-derived-mode" code nil nil [9983 10371])
            ("help-mode-setup" function nil nil [10388 10458])
            ("help-mode-finish" function nil nil [10475 10608])
            ("help-back-label" variable (:default-value (purecopy "[back]")) nil [10852 10961])
            ("help-forward-label" variable (:default-value (purecopy "[forward]")) nil [10963 11081])
            ("help-xref-symbol-regexp" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(\\(variable\\|option\\)\\|" "\\(function\\|command\\|call\\)\\|" "\\(face\\)\\|" "\\(symbol\\|program\\|property\\)\\|" "\\(source \\(?:code \\)?\\(?:of\\|for\\)\\)\\)" "[ 	
]+\\)?" "`\\(\\sw\\(\\sw\\|\\s_\\)+\\)'")))
                nil [11083 11708])
            ("help-xref-mule-regexp" variable nil nil [11710 11983])
            ("help-xref-info-regexp" variable
               (:constant-flag t
                :default-value (purecopy "\\<[Ii]nfo[ 	
]+\\(node\\|anchor\\)[ 	
]+`\\([^']+\\)'"))
                nil [11986 12151])
            ("help-xref-url-regexp" variable
               (:constant-flag t
                :default-value (purecopy "\\<[Uu][Rr][Ll][ 	
]+`\\([^']+\\)'"))
                nil [12153 12288])
            ("help-setup-xref" function (:arguments ("item" "interactive-p")) nil [12305 13210])
            ("help-xref-following" variable nil nil [13212 13295])
            ("help-buffer" function nil nil [13312 13858])
            ("help-make-xrefs" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [13875 23699])
            ("help-xref-button" function (:arguments ("match-number" "type" "args")) nil [23716 24300])
            ("help-insert-xref-button" function (:arguments ("string" "type" "args")) nil [24317 24679])
            ("help-xref-on-pp" function (:arguments ("from" "to")) nil [24696 25583])
            ("help-xref-interned" function (:arguments ("symbol")) nil [25652 27661])
            ("help-xref-go-back" function (:arguments ("buffer")) nil [27704 28502])
            ("help-xref-go-forward" function (:arguments ("buffer")) nil [28504 29283])
            ("help-go-back" function (:user-visible-flag t) nil [29285 29479])
            ("help-go-forward" function (:user-visible-flag t) nil [29481 29681])
            ("help-do-xref" function (:arguments ("_pos" "function" "args")) nil [29683 29989])
            ("help-follow-mouse" function (:user-visible-flag t) nil [30046 30176])
            ("help-follow" function (:user-visible-flag t) nil [30233 30400])
            ("help-follow-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [30402 31060])
            ("help-mode-revert-buffer" function (:arguments ("_ignore-auto" "noconfirm")) nil [31062 31443])
            ("help-insert-string" function (:arguments ("string")) nil [31445 31916])
            ("declare-function" code nil nil [31941 32004])
            ("declare-function" code nil nil [32005 32117])
            ("help-bookmark-make-record" function nil nil [32119 32603])
            ("help-bookmark-jump" function (:arguments ("bookmark")) nil [32620 33083])
            ("help-mode" package nil nil [33086 33106]))          
      :file "help-mode.el.gz"
      :pointmax 33135
      :fsize 8353
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1115 . 1116) (symbol 1078 . 1095) (open-paren 1077 . 1078)))
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1248 1265])
            ("custom-define-hook" variable nil nil [1267 1416])
            ("custom-dont-initialize" variable nil nil [1418 1601])
            ("custom-current-group-alist" variable nil nil [1603 1716])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1746 2209])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2211 2786])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2788 3555])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3557 4335])
            ("custom-delayed-init-variables" variable nil nil [4337 4434])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4436 5560])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5562 8161])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8163 14297])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14325 17265])
            ("custom-current-group" function nil nil [17294 17383])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17385 18446])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18448 19608])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19610 19956])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19958 20360])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20379 20969])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20971 21682])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21684 22437])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22439 22890])
            ("defalias" code nil nil [22891 22947])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22949 23185])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23187 23337])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23339 23513])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23515 23811])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23813 24099])
            ("custom-variable-p" function (:arguments ("variable")) nil [24101 24534])
            ("define-obsolete-function-alias" code nil nil [24536 24611])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24613 24908])
            ("custom-load-recursion" variable nil nil [25051 25127])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25129 26388])
            ("custom-local-buffer" variable nil nil [26391 26711])
            ("put" code nil nil [26712 26757])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26759 27140])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27142 27566])
            ("custom-quote" function (:arguments ("sexp")) nil [27568 27906])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27908 29071])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29073 30228])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30230 30702])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32529 32917])
            ("custom-theme-p" function (:arguments ("theme")) nil [32919 33028])
            ("custom-check-theme" function (:arguments ("theme")) nil [33030 33208])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33210 35406])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35408 36178])
            ("custom-set-variables" function (:arguments ("args")) nil [36181 36792])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36794 39469])
            ("custom--sort-vars-table" variable nil nil [39471 39503])
            ("custom--sort-vars-result" variable nil nil [39504 39537])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39539 41071])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41073 41657])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42253 42874])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42876 43364])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43366 43871])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [43895 44242])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44244 45045])
            ("custom--inhibit-theme-enable" variable nil nil [45047 45333])
            ("provide-theme" function (:arguments ("theme")) nil [45335 45733])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45735 46355])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46357 49233])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49235 49985])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [49987 50252])
            ("custom-available-themes" function nil nil [50254 51134])
            ("custom-theme--load-path" function nil nil [51136 51455])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [51502 52738])
            ("custom-enabled-themes" variable nil nil [52740 54050])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54052 54170])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [54172 55771])
            ("declare-function" code nil nil [55813 55907])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [55909 56269])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [56271 56664])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56666 57121])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [57123 57543])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [57760 58131])
            ("custom-reset-variables" function (:arguments ("args")) nil [58133 58474])
            ("custom" package nil nil [58490 58507]))          
      :file "custom.el.gz"
      :pointmax 58533
      :fsize 17003
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "button.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2216 2310])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) (define-key map [mode-line mouse-2] (quote push-button)) (define-key map [header-line mouse-2] (quote push-button)) map)) nil [2312 2923])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2925 3249])
            ("put" code nil nil [3285 3320])
            ("put" code nil nil [3321 3365])
            ("put" code nil nil [3366 3406])
            ("put" code nil nil [3407 3442])
            ("put" code nil nil [3508 3545])
            ("put" code nil nil [3546 3622])
            ("put" code nil nil [3692 3726])
            ("put" code nil nil [3822 3861])
            ("put" code nil nil [3923 3976])
            ("button-category-symbol" function (:arguments ("type")) nil [4537 4807])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4809 6447])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6449 6588])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6590 6721])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6723 6951])
            ("button-start" function (:arguments ("button")) nil [6998 7244])
            ("button-end" function (:arguments ("button")) nil [7246 7477])
            ("button-get" function (:arguments ("button" "prop")) nil [7479 7808])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7810 8779])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8781 9611])
            ("button-label" function (:arguments ("button")) nil [9613 9867])
            ("button-type" function (:arguments ("button")) nil [9869 9961])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [9963 10131])
            ("button--area-button-p" function (:arguments ("b")) nil [10133 10312])
            ("defalias" code nil nil [10314 10405])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [10437 11365])
            ("insert-button" function (:arguments ("label" "properties")) nil [11367 11834])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [11873 14084])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [14086 14771])
            ("button-at" function (:arguments ("pos")) nil [14807 15197])
            ("next-button" function (:arguments ("pos" "count-current")) nil [15199 15765])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [15767 16774])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [16796 18128])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18130 19649])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [19651 20155])
            ("button" package nil nil [20158 20175]))          
      :file "button.el.gz"
      :pointmax 20201
      :fsize 6041
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "widget.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("define-widget-keywords" function (:arguments ("_keys")) nil [1380 1834])
            ("put" code nil nil [3028 3066])
            ("define-widget" function (:arguments ("name" "class" "doc" "args")) nil [3106 3662])
            ("defalias" code nil nil [3723 3768])
            ("widget" package nil nil [3784 3801]))          
      :file "widget.el.gz"
      :pointmax 3827
      :fsize 1797
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "font-lock.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [10480 10497])
            ("cl-lib" include nil nil [10517 10534])
            ("font-lock" customgroup
               (:user-visible-flag t
                :value (quote ((jit-lock custom-group))))
                nil [10571 10813])
            ("font-lock-faces" customgroup (:user-visible-flag t) nil [10815 10921])
            ("font-lock-extra-types" customgroup (:user-visible-flag t) nil [10923 11045])
            ("font-lock-maximum-size" variable (:default-value 256000) nil [11068 12124])
            ("make-obsolete-variable" code nil nil [12125 12184])
            ("font-lock-maximum-decoration" variable (:default-value t) nil [12186 13316])
            ("font-lock-verbose" variable nil nil [13318 13631])
            ("font-lock-comment-face" variable (:default-value (quote font-lock-comment-face)) nil [14305 14396])
            ("font-lock-comment-delimiter-face" variable (:default-value (quote font-lock-comment-delimiter-face)) nil [14398 14518])
            ("font-lock-string-face" variable (:default-value (quote font-lock-string-face)) nil [14520 14608])
            ("font-lock-doc-face" variable (:default-value (quote font-lock-doc-face)) nil [14610 14698])
            ("font-lock-keyword-face" variable (:default-value (quote font-lock-keyword-face)) nil [14700 14791])
            ("font-lock-builtin-face" variable (:default-value (quote font-lock-builtin-face)) nil [14793 14884])
            ("font-lock-function-name-face" variable (:default-value (quote font-lock-function-name-face)) nil [14886 14994])
            ("font-lock-variable-name-face" variable (:default-value (quote font-lock-variable-name-face)) nil [14996 15104])
            ("font-lock-type-face" variable (:default-value (quote font-lock-type-face)) nil [15106 15203])
            ("font-lock-constant-face" variable (:default-value (quote font-lock-constant-face)) nil [15205 15314])
            ("font-lock-warning-face" variable (:default-value (quote font-lock-warning-face)) nil [15316 15427])
            ("font-lock-negation-char-face" variable (:default-value (quote font-lock-negation-char-face)) nil [15429 15597])
            ("font-lock-preprocessor-face" variable (:default-value (quote font-lock-preprocessor-face)) nil [15599 15714])
            ("define-obsolete-variable-alias" code nil nil [15716 15808])
            ("font-lock-keywords" variable nil nil [15839 21670])
            ("font-lock-keywords-alist" variable nil nil [21672 22276])
            ("put" code nil nil [22277 22332])
            ("font-lock-removed-keywords-alist" variable nil nil [22334 22734])
            ("font-lock-keywords-only" variable nil nil [22736 22887])
            ("font-lock-keywords-case-fold-search" variable nil nil [22889 23126])
            ("make-variable-buffer-local" code nil nil [23127 23192])
            ("font-lock-syntactically-fontified" variable nil nil [23194 23413])
            ("make-variable-buffer-local" code nil nil [23414 23477])
            ("font-lock-syntactic-face-function" variable (:default-value (lambda (state) (if (nth 3 state) font-lock-string-face font-lock-comment-face))) nil [23479 23896])
            ("font-lock-syntactic-keywords" variable nil nil [23898 25123])
            ("make-obsolete-variable" code nil nil [25124 25237])
            ("font-lock-syntax-table" variable nil nil [25239 25432])
            ("font-lock-beginning-of-syntax-function" variable nil nil [25434 26056])
            ("make-obsolete-variable" code nil nil [26057 26180])
            ("font-lock-mark-block-function" variable nil nil [26182 26448])
            ("font-lock-fontify-buffer-function" variable (:default-value (quote font-lock-default-fontify-buffer)) nil [26450 26620])
            ("font-lock-unfontify-buffer-function" variable (:default-value (quote font-lock-default-unfontify-buffer)) nil [26622 26844])
            ("font-lock-fontify-region-function" variable (:default-value (quote font-lock-default-fontify-region)) nil [26846 27179])
            ("font-lock-unfontify-region-function" variable (:default-value (quote font-lock-default-unfontify-region)) nil [27181 27417])
            ("font-lock-inhibit-thing-lock" variable nil nil [27419 27667])
            ("font-lock-multiline" variable nil nil [27669 27996])
            ("font-lock-fontified" variable nil nil [27998 28030])
            ("font-lock-face-attributes" variable nil nil [28522 28556])
            ("save-buffer-state" function (:arguments ("body")) nil [28231 28482])
            ("font-lock-specified-p" function (:arguments ("mode")) nil [28592 29016])
            ("font-lock-initial-fontify" function nil nil [29018 29580])
            ("font-lock-mode-internal" function (:arguments ("arg")) nil [29582 30003])
            ("font-lock-add-keywords" function (:arguments ("mode" "keywords" "how")) nil [30005 33722])
            ("font-lock-update-removed-keyword-alist" function (:arguments ("mode" "keywords" "how")) nil [33724 34812])
            ("font-lock-remove-keywords" function (:arguments ("mode" "keywords")) nil [35633 38283])
            ("font-lock-support-mode" variable (:default-value (quote jit-lock-mode)) nil [38627 40306])
            ("fast-lock-mode" variable nil nil [40308 40331])
            ("lazy-lock-mode" variable nil nil [40332 40355])
            ("jit-lock-mode" variable nil nil [40356 40378])
            ("declare-function" code nil nil [40380 40441])
            ("declare-function" code nil nil [40442 40505])
            ("declare-function" code nil nil [40506 40551])
            ("declare-function" code nil nil [40552 40613])
            ("declare-function" code nil nil [40614 40677])
            ("declare-function" code nil nil [40678 40723])
            ("font-lock-turn-on-thing-lock" function nil nil [40725 41617])
            ("font-lock-turn-off-thing-lock" function nil nil [41619 41978])
            ("font-lock-after-fontify-buffer" function nil nil [41980 42302])
            ("font-lock-after-unfontify-buffer" function nil nil [42304 42840])
            ("font-lock-extend-after-change-region-function" variable nil nil [45492 46242])
            ("make-variable-buffer-local" code nil nil [46243 46318])
            ("font-lock-fontify-buffer" function (:user-visible-flag t) nil [46320 46623])
            ("font-lock-unfontify-buffer" function nil nil [46625 46710])
            ("font-lock-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [46712 47022])
            ("font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [47024 47253])
            ("font-lock-default-fontify-buffer" function nil nil [47255 47972])
            ("font-lock-default-unfontify-buffer" function nil nil [47974 48313])
            ("font-lock-dont-widen" variable nil nil [48315 48518])
            ("font-lock-beg" variable nil nil [48521 48543])
            ("font-lock-end" variable nil nil [48544 48566])
            ("font-lock-extend-region-functions" variable (:default-value (quote (font-lock-extend-region-wholelines font-lock-extend-region-multiline))) nil [48567 49874])
            ("make-variable-buffer-local" code nil nil [50005 50068])
            ("font-lock-extend-region-multiline" function nil nil [50070 50839])
            ("font-lock-extend-region-wholelines" function nil nil [50841 51268])
            ("font-lock-default-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [51270 53234])
            ("font-lock-extra-managed-props" variable nil nil [53677 53890])
            ("font-lock-default-unfontify-region" function (:arguments ("beg" "end")) nil [53892 54263])
            ("font-lock-after-change-function" function (:arguments ("beg" "end" "old-len")) nil [54321 55458])
            ("jit-lock-start" variable nil nil [55460 55483])
            ("jit-lock-end" variable nil nil [55484 55505])
            ("font-lock-extend-jit-lock-region-after-change" function (:arguments ("beg" "end" "old-len")) nil [55506 58784])
            ("font-lock-fontify-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58786 59938])
            ("font-lock-prepend-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [60372 61301])
            ("font-lock-append-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [61303 62229])
            ("font-lock-fillin-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [62231 62864])
            ("font-lock-apply-syntactic-highlight" function (:arguments ("highlight")) nil [65218 66549])
            ("font-lock-fontify-syntactic-anchored-keywords" function (:arguments ("keywords" "limit")) nil [66551 67600])
            ("font-lock-fontify-syntactic-keywords-region" function (:arguments ("start" "end")) nil [67602 69412])
            ("font-lock-comment-start-skip" variable nil nil [69509 69624])
            ("font-lock-comment-end-skip" variable nil nil [69626 69732])
            ("font-lock-fontify-syntactically-region" function (:arguments ("start" "end" "loudly")) nil [69734 71410])
            ("font-lock-apply-highlight" function (:arguments ("highlight")) nil [71505 73029])
            ("font-lock-fontify-anchored-keywords" function (:arguments ("keywords" "limit")) nil [73031 74443])
            ("font-lock-fontify-keywords-region" function (:arguments ("start" "end" "loudly")) nil [74445 76834])
            ("font-lock-compile-keywords" function (:arguments ("keywords" "syntactic-keywords")) nil [76912 78736])
            ("font-lock-compile-keyword" function (:arguments ("keyword")) nil [78738 79593])
            ("font-lock-eval-keywords" function (:arguments ("keywords")) nil [79595 79851])
            ("font-lock-value-in-major-mode" function (:arguments ("values")) nil [79853 80207])
            ("font-lock-choose-keywords" function (:arguments ("keywords" "level")) nil [80209 80597])
            ("font-lock-set-defaults" variable nil nil [80599 80634])
            ("font-lock-refresh-defaults" function nil nil [80671 81247])
            ("font-lock-major-mode" variable nil nil [81249 81347])
            ("make-variable-buffer-local" code nil nil [81348 81398])
            ("font-lock-set-defaults" function nil nil [81400 84325])
            ("font-lock-comment-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic)))
                :type "face")
                nil [84450 85287])
            ("font-lock-comment-delimiter-face" variable
               (:default-value (quote ((default :inherit font-lock-comment-face)))
                :type "face")
                nil [85289 85466])
            ("font-lock-string-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "VioletRed4") (((class color) (min-colors 88) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 16) (background light)) :foreground "RosyBrown") (((class color) (min-colors 16) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 8)) :foreground "green") (t :slant italic)))
                :type "face")
                nil [85468 86149])
            ("font-lock-doc-face" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [86151 86302])
            ("font-lock-keyword-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold)))
                :type "face")
                nil [86304 86976])
            ("font-lock-builtin-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [86978 87677])
            ("font-lock-function-name-face" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :inverse-video t :weight bold)))
                :type "face")
                nil [87679 88230])
            ("font-lock-variable-name-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "sienna") (((class color) (min-colors 88) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 16) (background light)) :foreground "DarkGoldenrod") (((class color) (min-colors 16) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 8)) :foreground "yellow" :weight light) (t :weight bold :slant italic)))
                :type "face")
                nil [88232 88993])
            ("font-lock-type-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t)))
                :type "face")
                nil [88995 89689])
            ("font-lock-constant-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold :underline t) (((class grayscale) (background dark)) :foreground "Gray50" :weight bold :underline t) (((class color) (min-colors 88) (background light)) :foreground "dark cyan") (((class color) (min-colors 88) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 16) (background light)) :foreground "CadetBlue") (((class color) (min-colors 16) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 8)) :foreground "magenta") (t :weight bold :underline t)))
                :type "face")
                nil [89691 90430])
            ("font-lock-warning-face" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [90432 90566])
            ("font-lock-negation-char-face" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [90568 90714])
            ("font-lock-preprocessor-face" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [90716 90887])
            ("font-lock-regexp-grouping-backslash" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [90889 91059])
            ("font-lock-regexp-grouping-construct" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [91061 91234])
            ("font-lock-match-c-style-declaration-item-and-skip-to-next" function (:arguments ("limit")) nil [96074 98103])
            ("cpp-font-lock-keywords-source-directives" variable
               (:constant-flag t
                :default-value "define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|mport\\|nclude\\)\\|line\\|pragma\\|undef\\|warning")
                nil [98728 98974])
            ("cpp-font-lock-keywords-source-depth" variable (:constant-flag t) nil [99229 99411])
            ("cpp-font-lock-keywords" variable
               (:constant-flag t
                :default-value (let* ((directives cpp-font-lock-keywords-source-directives) (directives-depth cpp-font-lock-keywords-source-depth)) (list (quote ("^#[ 	]*\\(?:error\\|warning\\)[ 	]+\\(.+\\)" 1 font-lock-warning-face prepend)) (quote ("^#[ 	]*\\(?:import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" 1 font-lock-string-face prepend)) (quote ("^#[ 	]*define[ 	]+\\([[:alpha:]_][[:alnum:]_$]*\\)(" (1 font-lock-function-name-face prepend) ((lambda (limit) (re-search-forward "\\(?:\\([[:alpha:]_][[:alnum:]_]*\\)[,]?\\)" (or (save-excursion (re-search-forward ")" limit t)) limit) t)) nil nil (1 font-lock-variable-name-face prepend)))) (quote ("^#[ 	]*\\(?:elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\([[:alpha:]_][[:alnum:]_]*\\)?" nil nil (1 font-lock-builtin-face prepend) (2 font-lock-variable-name-face prepend t)))) (list (concat "^\\(#[ 	]*\\(?:" directives "\\)\\)\\>[ 	!]*\\([[:alpha:]_][[:alnum:]_]*\\)?") (quote (1 font-lock-preprocessor-face prepend)) (list (+ 2 directives-depth) (quote font-lock-variable-name-face) nil t)))))
                nil [99413 101220])
            ("font-lock" package nil nil [101223 101243]))          
      :file "font-lock.el.gz"
      :pointmax 101272
      :fsize 26222
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 28556 . 28557) (symbol 28094 . 28111) (open-paren 28093 . 28094) (close-paren 10534 . 10535) (symbol 10499 . 10516) (open-paren 10498 . 10499)))
    (semanticdb-table "ezimage.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("condition-case" code nil nil [1309 1385])
            ("ezimage-use-images" variable (:default-value (if (featurep (quote xemacs)) (and (fboundp (quote make-image-specifier)) window-system) (and (display-images-p) (image-type-available-p (quote xpm))))) nil [1397 1689])
            ("if" code nil nil [1749 4257])
            ("ezimage-directory" variable
               (:default-value ((:type xpm :file "ezimage/dir.xpm" :ascent center))
                :type "image")
                nil [4260 4383])
            ("ezimage-directory-plus" variable
               (:default-value ((:type xpm :file "ezimage/dir-plus.xpm" :ascent center))
                :type "image")
                nil [4385 4538])
            ("ezimage-directory-minus" variable
               (:default-value ((:type xpm :file "ezimage/dir-minus.xpm" :ascent center))
                :type "image")
                nil [4540 4693])
            ("ezimage-page-plus" variable
               (:default-value ((:type xpm :file "ezimage/page-plus.xpm" :ascent center))
                :type "image")
                nil [4695 4838])
            ("ezimage-page-minus" variable
               (:default-value ((:type xpm :file "ezimage/page-minus.xpm" :ascent center))
                :type "image")
                nil [4840 4983])
            ("ezimage-page" variable
               (:default-value ((:type xpm :file "ezimage/page.xpm" :ascent center))
                :type "image")
                nil [4985 5123])
            ("ezimage-tag" variable
               (:default-value ((:type xpm :file "ezimage/tag.xpm" :ascent center))
                :type "image")
                nil [5125 5229])
            ("ezimage-tag-plus" variable
               (:default-value ((:type xpm :file "ezimage/tag-plus.xpm" :ascent center))
                :type "image")
                nil [5231 5358])
            ("ezimage-tag-minus" variable
               (:default-value ((:type xpm :file "ezimage/tag-minus.xpm" :ascent center))
                :type "image")
                nil [5360 5481])
            ("ezimage-tag-gt" variable
               (:default-value ((:type xpm :file "ezimage/tag-gt.xpm" :ascent center))
                :type "image")
                nil [5483 5619])
            ("ezimage-tag-v" variable
               (:default-value ((:type xpm :file "ezimage/tag-v.xpm" :ascent center))
                :type "image")
                nil [5621 5753])
            ("ezimage-tag-type" variable
               (:default-value ((:type xpm :file "ezimage/tag-type.xpm" :ascent center))
                :type "image")
                nil [5755 5896])
            ("ezimage-box-plus" variable
               (:default-value ((:type xpm :file "ezimage/box-plus.xpm" :ascent center))
                :type "image")
                nil [5898 6014])
            ("ezimage-box-minus" variable
               (:default-value ((:type xpm :file "ezimage/box-minus.xpm" :ascent center))
                :type "image")
                nil [6016 6133])
            ("ezimage-mail" variable
               (:default-value ((:type xpm :file "ezimage/mail.xpm" :ascent center))
                :type "image")
                nil [6135 6242])
            ("ezimage-checkout" variable
               (:default-value ((:type xpm :file "ezimage/checkmark.xpm" :ascent center))
                :type "image")
                nil [6244 6402])
            ("ezimage-object" variable
               (:default-value ((:type xpm :file "ezimage/bits.xpm" :ascent center))
                :type "image")
                nil [6404 6533])
            ("ezimage-object-out-of-date" variable
               (:default-value ((:type xpm :file "ezimage/bitsbang.xpm" :ascent center))
                :type "image")
                nil [6535 6709])
            ("ezimage-label" variable
               (:default-value ((:type xpm :file "ezimage/label.xpm" :ascent center))
                :type "image")
                nil [6711 6827])
            ("ezimage-lock" variable
               (:default-value ((:type xpm :file "ezimage/lock.xpm" :ascent center))
                :type "image")
                nil [6829 6964])
            ("ezimage-unlock" variable
               (:default-value ((:type xpm :file "ezimage/unlock.xpm" :ascent center))
                :type "image")
                nil [6966 7082])
            ("ezimage-key" variable
               (:default-value ((:type xpm :file "ezimage/key.xpm" :ascent center))
                :type "image")
                nil [7084 7183])
            ("ezimage-document-tag" variable
               (:default-value ((:type xpm :file "ezimage/doc.xpm" :ascent center))
                :type "image")
                nil [7185 7325])
            ("ezimage-document-plus" variable
               (:default-value ((:type xpm :file "ezimage/doc-plus.xpm" :ascent center))
                :type "image")
                nil [7327 7470])
            ("ezimage-document-minus" variable
               (:default-value ((:type xpm :file "ezimage/doc-minus.xpm" :ascent center))
                :type "image")
                nil [7472 7615])
            ("ezimage-info-tag" variable
               (:default-value ((:type xpm :file "ezimage/info.xpm" :ascent center))
                :type "image")
                nil [7617 7757])
            ("ezimage-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("%" . ezimage-lock)))) nil [7759 8351])
            ("ezimage-insert-image-button-maybe" function (:arguments ("start" "length" "string")) nil [8353 9303])
            ("ezimage-image-over-string" function (:arguments ("string" "alist")) nil [9305 9685])
            ("ezimage-insert-over-text" function (:arguments ("image" "start" "end" "string")) nil [9687 10226])
            ("ezimage-image-association-dump" function (:user-visible-flag t) nil [10228 11030])
            ("ezimage-image-dump" function (:user-visible-flag t) nil [11032 11746])
            ("ezimage-all-images" function nil nil [11748 12032])
            ("ezimage" package nil nil [12034 12052]))          
      :file "ezimage.el.gz"
      :pointmax 12080
      :fsize 3590
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 4257 . 4258) (symbol 1731 . 1747) (open-paren 1730 . 1731)))
    (semanticdb-table "speedbar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("speedbar-version" variable (:default-value "1.0") nil [194 262])
            ("speedbar-incompatible-version" variable (:default-value "0.14beta4") nil [263 500])
            ("easymenu" include nil nil [5985 6004])
            ("dframe" include nil nil [6005 6022])
            ("sb-image" include nil nil [6023 6042])
            ("speedbar" customgroup (:user-visible-flag t) nil [6067 6286])
            ("speedbar-faces" customgroup (:user-visible-flag t) nil [6288 6453])
            ("speedbar-vc" customgroup (:user-visible-flag t) nil [6455 6613])
            ("speedbar-initial-expansion-mode-alist" variable (:default-value (quote (("buffers" speedbar-buffer-easymenu-definition speedbar-buffers-key-map speedbar-buffer-buttons) ("quick buffers" speedbar-buffer-easymenu-definition speedbar-buffers-key-map speedbar-buffer-buttons-temp) ("files" speedbar-easymenu-definition-special speedbar-file-key-map speedbar-directory-buttons speedbar-default-directory-list)))) nil [7327 8570])
            ("speedbar-initial-expansion-list-name" variable (:default-value "files") nil [8572 8818])
            ("speedbar-previously-used-expansion-list-name" variable (:default-value "files") nil [8820 9040])
            ("speedbar-stealthy-function-list" variable (:default-value (quote (("files" speedbar-update-current-file speedbar-check-read-only speedbar-check-vc speedbar-check-objects)))) nil [9042 9796])
            ("speedbar-mode-functions-list" variable (:default-value (quote (("files" (speedbar-item-info . speedbar-files-item-info) (speedbar-line-directory . speedbar-files-line-directory)) ("buffers" (speedbar-item-info . speedbar-buffers-item-info) (speedbar-line-directory . speedbar-buffers-line-directory)) ("quick buffers" (speedbar-item-info . speedbar-buffers-item-info) (speedbar-line-directory . speedbar-buffers-line-directory))))) nil [9798 10886])
            ("speedbar-mode-specific-contents-flag" variable (:default-value t) nil [10888 11112])
            ("speedbar-query-confirmation-method" variable (:default-value (quote all)) nil [11114 11635])
            ("speedbar-special-mode-expansion-list" variable nil nil [11637 11973])
            ("speedbar-special-mode-key-map" variable nil nil [11975 12200])
            ("speedbar-before-visiting-file-hook" variable (:default-value (quote (push-mark))) nil [12202 12440])
            ("speedbar-visiting-file-hook" variable nil nil [12442 12583])
            ("speedbar-before-visiting-tag-hook" variable (:default-value (quote (push-mark))) nil [12585 12821])
            ("speedbar-visiting-tag-hook" variable (:default-value (quote (speedbar-highlight-one-tag-line))) nil [12823 13101])
            ("speedbar-load-hook" variable nil nil [13103 13209])
            ("speedbar-reconfigure-keymaps-hook" variable nil nil [13211 13341])
            ("speedbar-show-unknown-files" variable nil nil [13343 13543])
            ("speedbar-update-speed" variable (:default-value dframe-update-speed) nil [13782 13832])
            ("make-obsolete-variable" code nil nil [13833 13939])
            ("speedbar-navigating-speed" variable (:default-value dframe-update-speed) nil [13941 13995])
            ("make-obsolete-variable" code nil nil [13996 14106])
            ("speedbar-frame-parameters" variable (:default-value (quote ((minibuffer) (width . 20) (border-width . 0) (menu-bar-lines . 0) (tool-bar-lines . 0) (unsplittable . t) (left-fringe . 0)))) nil [14129 14767])
            ("speedbar-frame-plist" variable (:default-value (quote (minibuffer nil width 20 border-width 0 internal-border-width 0 unsplittable t default-toolbar-visible-p nil has-modeline-p nil menubar-visible-p nil default-gutter-visible-p nil))) nil [14820 15400])
            ("speedbar-use-imenu-flag" variable (:default-value (fboundp (quote imenu))) nil [15402 15723])
            ("speedbar-dynamic-tags-function-list" variable (:default-value (quote ((speedbar-fetch-dynamic-imenu . speedbar-insert-imenu-list) (speedbar-fetch-dynamic-etags . speedbar-insert-etags-list)))) nil [15725 16417])
            ("speedbar-use-tool-tips-flag" variable (:default-value (fboundp (quote tooltip-mode))) nil [16419 16664])
            ("speedbar-track-mouse-flag" variable (:default-value (not speedbar-use-tool-tips-flag)) nil [16666 16839])
            ("speedbar-default-position" variable (:default-value (quote left-right)) nil [16841 17193])
            ("speedbar-sort-tags" variable nil nil [17195 17374])
            ("speedbar-tag-hierarchy-method" variable (:default-value (quote (speedbar-prefix-group-tag-hierarchy speedbar-trim-words-tag-hierarchy))) nil [17376 18174])
            ("speedbar-tag-group-name-minimum-length" variable (:default-value 4) nil [18176 18613])
            ("speedbar-tag-split-minimum-length" variable (:default-value 20) nil [18615 18850])
            ("speedbar-tag-regroup-maximum-length" variable (:default-value 10) nil [18852 19145])
            ("speedbar-directory-button-trim-method" variable (:default-value (quote span)) nil [19147 19639])
            ("speedbar-smart-directory-expand-flag" variable (:default-value t) nil [19641 20099])
            ("speedbar-indentation-width" variable (:default-value 1) nil [20101 20253])
            ("speedbar-hide-button-brackets-flag" variable nil nil [20255 20410])
            ("speedbar-before-popup-hook" variable nil nil [20412 20542])
            ("speedbar-after-create-hook" variable (:default-value (quote (speedbar-frame-reposition-smartly))) nil [20544 20706])
            ("speedbar-before-delete-hook" variable nil nil [20708 20837])
            ("speedbar-mode-hook" variable nil nil [20839 20953])
            ("speedbar-timer-hook" variable nil nil [20955 21083])
            ("speedbar-verbosity-level" variable (:default-value 1) nil [21085 21294])
            ("speedbar-indicator-separator" variable (:default-value " ") nil [21296 21396])
            ("speedbar-vc-do-check" variable (:default-value t) nil [21398 21610])
            ("speedbar-vc-indicator" variable (:default-value "*") nil [21612 21847])
            ("speedbar-vc-directory-enable-hook" variable nil nil [21849 22104])
            ("speedbar-vc-in-control-hook" variable nil nil [22106 22383])
            ("speedbar-vc-to-do-point" variable nil nil [22385 22496])
            ("speedbar-obj-do-check" variable (:default-value t) nil [22498 22759])
            ("speedbar-obj-to-do-point" variable nil nil [22761 22873])
            ("speedbar-obj-indicator" variable (:default-value (quote ("#" . "!"))) nil [22875 23130])
            ("speedbar-obj-alist" variable (:default-value (quote (("\\.\\([cpC]\\|cpp\\|cc\\|cxx\\)$" . ".o") ("\\.el$" . ".elc") ("\\.java$" . ".class") ("\\.f\\(or\\|90\\|77\\)?$" . ".o") ("\\.tex$" . ".dvi") ("\\.texi$" . ".info")))) nil [23132 23424])
            ("speedbar-ro-to-do-point" variable nil nil [23426 23531])
            ("speedbar-object-read-only-indicator" variable (:default-value "%") nil [23533 23644])
            ("speedbar-indicator-regex" variable (:default-value (concat (regexp-quote speedbar-indicator-separator) "\\(" (regexp-quote speedbar-vc-indicator) "\\|" (regexp-quote (car speedbar-obj-indicator)) "\\|" (regexp-quote (cdr speedbar-obj-indicator)) "\\|" (regexp-quote speedbar-object-read-only-indicator) "\\)*")) nil [23758 24187])
            ("speedbar-scanner-reset-hook" variable nil nil [24189 24399])
            ("speedbar-ignored-modes" variable (:default-value (quote (fundamental-mode))) nil [24401 24636])
            ("speedbar-extension-list-to-regex" function (:arguments ("extlist")) nil [24638 25483])
            ("speedbar-ignored-directory-regexp" variable nil nil [25485 25897])
            ("define-obsolete-variable-alias" code nil nil [25899 26015])
            ("speedbar-ignored-directory-expressions" variable (:default-value (quote ("[/\\]logs?[/\\]\\'"))) nil [26017 26698])
            ("speedbar-directory-unshown-regexp" variable (:default-value "^\\(\\..*\\)\\'") nil [26700 27046])
            ("speedbar-file-unshown-regexp" variable (:default-value (let ((nstr "") (noext completion-ignored-extensions)) (while noext (setq nstr (concat nstr (regexp-quote (car noext)) "\\'" (if (cdr noext) "\\|" "")) noext (cdr noext))) (concat nstr "\\|#[^#]+#$\\|\\.\\.?\\'\\|\\.#"))) nil [27048 27562])
            ("speedbar-file-regexp" variable nil nil [27564 27768])
            ("speedbar-supported-extension-expressions" variable (:default-value (append (quote (".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".js" ".f\\(90\\|77\\|or\\)?")) (if speedbar-use-imenu-flag (quote (".ad[abs]" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" ".ma?k" "[Mm]akefile\\(\\.in\\)?"))))) nil [27865 29199])
            ("setq" code nil nil [29201 29310])
            ("speedbar-add-supported-extension" function
               (:user-visible-flag t
                :arguments ("extension"))
                nil [29312 30125])
            ("speedbar-add-ignored-directory-regexp" function
               (:user-visible-flag t
                :arguments ("directory-expression"))
                nil [30127 30987])
            ("if" code nil nil [31046 31319])
            ("speedbar-update-flag" variable (:default-value dframe-have-timer-flag) nil [31321 31796])
            ("speedbar-update-flag-disable" variable nil nil [31798 31892])
            ("define-obsolete-variable-alias" code nil nil [31894 31986])
            ("speedbar-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 39 " " st) (modify-syntax-entry 34 " " st) (modify-syntax-entry 40 " " st) (modify-syntax-entry 41 " " st) (modify-syntax-entry 123 " " st) (modify-syntax-entry 125 " " st) (modify-syntax-entry 91 " " st) (modify-syntax-entry 93 " " st) st)) nil [31987 32444])
            ("define-obsolete-variable-alias" code nil nil [32447 32523])
            ("speedbar-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map t) (define-key map "t" (quote speedbar-toggle-updates)) (define-key map "g" (quote speedbar-refresh)) (define-key map "n" (quote speedbar-next)) (define-key map "p" (quote speedbar-prev)) (define-key map "\356" (quote speedbar-restricted-next)) (define-key map "\360" (quote speedbar-restricted-prev)) (define-key map "\216" (quote speedbar-forward-list)) (define-key map "\220" (quote speedbar-backward-list)) (define-key map "r" (lambda nil (interactive) (speedbar-change-initial-expansion-list speedbar-previously-used-expansion-list-name))) (define-key map "b" (lambda nil (interactive) (speedbar-change-initial-expansion-list "quick buffers"))) (define-key map "f" (lambda nil (interactive) (speedbar-change-initial-expansion-list "files"))) (dframe-update-keymap map) map)) nil [32524 33699])
            ("speedbar-make-specialized-keymap" function nil nil [33701 33987])
            ("speedbar-file-key-map" variable (:default-value (let ((map (speedbar-make-specialized-keymap))) (define-key map "e" (quote speedbar-edit-line)) (define-key map "" (quote speedbar-edit-line)) (define-key map "+" (quote speedbar-expand-line)) (define-key map "=" (quote speedbar-expand-line)) (define-key map "-" (quote speedbar-contract-line)) (define-key map "[" (quote speedbar-expand-line-descendants)) (define-key map "]" (quote speedbar-contract-line-descendants)) (define-key map " " (quote speedbar-toggle-line-expansion)) (define-key map "U" (quote speedbar-up-directory)) (define-key map "I" (quote speedbar-item-info)) (define-key map "B" (quote speedbar-item-byte-compile)) (define-key map "L" (quote speedbar-item-load)) (define-key map "C" (quote speedbar-item-copy)) (define-key map "D" (quote speedbar-item-delete)) (define-key map "O" (quote speedbar-item-object-delete)) (define-key map "R" (quote speedbar-item-rename)) (define-key map "M" (quote speedbar-create-directory)) map)) nil [33989 35049])
            ("speedbar-easymenu-definition-base" variable (:default-value (append (quote ("Speedbar" ["Update" speedbar-refresh t] ["Auto Update" speedbar-toggle-updates :active (not speedbar-update-flag-disable) :style toggle :selected speedbar-update-flag])) (if (and (or (fboundp (quote defimage)) (fboundp (quote make-image-specifier))) (if (fboundp (quote display-graphic-p)) (display-graphic-p) window-system)) (list ["Use Images" speedbar-toggle-images :style toggle :selected speedbar-use-images])))) nil [35051 35595])
            ("speedbar-easymenu-definition-special" variable (:default-value (quote (["Edit Item On Line" speedbar-edit-line t] ["Show All Files" speedbar-toggle-show-all-files :style toggle :selected speedbar-show-unknown-files] ["Expand File Tags" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Flush Cache & Expand" speedbar-flush-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Expand All Descendants" speedbar-expand-line-descendants (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract File Tags" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))] "----" ["File/Tag Information" speedbar-item-info t] ["Load Lisp File" speedbar-item-load (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\[[+-]\\] .+\\(\\.el\\)\\( \\|$\\)"))] ["Byte Compile File" speedbar-item-byte-compile (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\[[+-]\\] .+\\(\\.el\\)\\( \\|$\\)"))] ["Copy File" speedbar-item-copy (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\["))] ["Rename File" speedbar-item-rename (save-excursion (beginning-of-line) (looking-at "[0-9]+: *[[<]"))] ["Create Directory" speedbar-create-directory (save-excursion (beginning-of-line) (looking-at "[0-9]+: *[[<]"))] ["Delete File" speedbar-item-delete (save-excursion (beginning-of-line) (looking-at "[0-9]+: *[[<]"))] ["Delete Object" speedbar-item-object-delete (save-excursion (beginning-of-line) (looking-at "[0-9]+: *\\[[+-]\\] [^ 
]+ \\*?[!#]$"))]))) nil [35597 37472])
            ("speedbar-easymenu-definition-trailer" variable (:default-value (append (if (and (featurep (quote custom)) (fboundp (quote custom-declare-variable))) (list ["Customize..." speedbar-customize t])) (list ["Close" dframe-close-frame t] ["Quit" delete-frame t]))) nil [37474 37782])
            ("speedbar-desired-buffer" variable nil nil [37784 37936])
            ("speedbar-buffer" variable nil nil [37937 38005])
            ("speedbar-frame" variable nil nil [38006 38068])
            ("speedbar-cached-frame" variable nil nil [38069 38171])
            ("speedbar-full-text-cache" variable nil nil [38172 38288])
            ("speedbar-last-selected-file" variable nil nil [38290 38387])
            ("speedbar-shown-directories" variable nil nil [38389 38506])
            ("speedbar-directory-contents-alist" variable nil nil [38508 38755])
            ("speedbar-power-click" variable nil nil [38757 38860])
            ("defalias" code nil nil [38885 38971])
            ("defalias" code nil nil [38973 39065])
            ("defalias" code nil nil [39067 39159])
            ("defalias" code nil nil [39161 39265])
            ("defalias" code nil nil [39323 39364])
            ("speedbar-frame-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39380 40999])
            ("speedbar-frame-reposition-smartly" function nil nil [41001 41981])
            ("speedbar-current-frame" function nil nil [41983 42142])
            ("speedbar-handle-delete-frame" function (:arguments ("e")) nil [42144 42454])
            ("speedbar-get-focus" function (:user-visible-flag t) nil [42471 42853])
            ("speedbar-frame-width" function nil nil [42855 43010])
            ("define-derived-mode" code nil nil [43012 45629])
            ("define-obsolete-function-alias" code nil nil [45631 45704])
            ("speedbar-y-or-n-p" function (:arguments ("prompt" "deleting")) nil [45706 46150])
            ("speedbar-select-attached-frame" function nil nil [46152 46302])
            ("define-obsolete-function-alias" code nil nil [46331 46432])
            ("define-obsolete-function-alias" code nil nil [46441 46560])
            ("speedbar-set-mode-line-format" function nil nil [46562 47769])
            ("speedbar-previous-menu" variable nil nil [47771 47878])
            ("speedbar-reconfigure-keymaps" function nil nil [47880 50034])
            ("speedbar-customize" function (:user-visible-flag t) nil [50062 50333])
            ("speedbar-track-mouse" function (:arguments ("event")) nil [50335 50756])
            ("speedbar-show-info-under-mouse" function nil nil [50758 51079])
            ("speedbar-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51081 51270])
            ("speedbar-prev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51272 51415])
            ("speedbar-restricted-move" function (:arguments ("arg")) nil [51417 52567])
            ("speedbar-restricted-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52569 52868])
            ("speedbar-restricted-prev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [52870 53182])
            ("speedbar-navigate-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [53184 53656])
            ("speedbar-forward-list" function (:user-visible-flag t) nil [53658 53907])
            ("speedbar-backward-list" function (:user-visible-flag t) nil [53909 54161])
            ("speedbar-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54163 54341])
            ("speedbar-scroll-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54343 54523])
            ("speedbar-up-directory" function (:user-visible-flag t) nil [54525 54803])
            ("speedbar-refresh" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54861 55752])
            ("speedbar-item-load" function (:user-visible-flag t) nil [55754 56197])
            ("speedbar-item-byte-compile" function (:user-visible-flag t) nil [56199 56587])
            ("speedbar-mouse-item-info" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [56589 56793])
            ("speedbar-generic-item-info" function nil nil [56795 57352])
            ("speedbar-item-info" function (:user-visible-flag t) nil [57354 57693])
            ("speedbar-item-info-file-helper" function (:arguments ("filename")) nil [57695 58121])
            ("speedbar-item-info-tag-helper" function nil nil [58123 60170])
            ("speedbar-files-item-info" function nil nil [60172 60458])
            ("speedbar-item-copy" function (:user-visible-flag t) nil [60460 61495])
            ("speedbar-item-rename" function (:user-visible-flag t) nil [61497 62471])
            ("speedbar-create-directory" function (:user-visible-flag t) nil [62473 62857])
            ("speedbar-item-delete" function (:user-visible-flag t) nil [62859 63305])
            ("speedbar-item-object-delete" function (:user-visible-flag t) nil [63307 63939])
            ("speedbar-enable-update" function (:user-visible-flag t) nil [63941 64153])
            ("speedbar-disable-update" function (:user-visible-flag t) nil [64155 64361])
            ("speedbar-toggle-updates" function (:user-visible-flag t) nil [64363 64554])
            ("speedbar-toggle-images" function (:user-visible-flag t) nil [64556 64729])
            ("speedbar-toggle-sorting" function (:user-visible-flag t) nil [64731 64858])
            ("speedbar-toggle-show-all-files" function (:user-visible-flag t) nil [64860 65059])
            ("speedbar-with-writable" function (:arguments ("forms")) nil [65061 65233])
            ("speedbar-insert-button" function (:arguments ("text" "face" "mouse" "function" "token" "prevline")) nil [65235 66299])
            ("speedbar-insert-separator" function (:arguments ("text")) nil [66301 66697])
            ("speedbar-make-button" function (:arguments ("start" "end" "face" "mouse" "function" "token")) nil [66699 67653])
            ("speedbar-initial-expansion-list" function nil nil [67697 68031])
            ("speedbar-initial-menu" function nil nil [68033 68337])
            ("speedbar-initial-keymap" function nil nil [68339 68649])
            ("speedbar-initial-stealthy-functions" function nil nil [68651 68943])
            ("speedbar-add-expansion-list" function (:arguments ("new-list")) nil [68945 69104])
            ("speedbar-change-initial-expansion-list" function
               (:user-visible-flag t
                :arguments ("new-default"))
                nil [69106 69771])
            ("speedbar-fetch-replacement-function" function (:arguments ("function")) nil [69773 70097])
            ("speedbar-add-mode-functions-list" function (:arguments ("new-list")) nil [70099 70301])
            ("speedbar-maybe-add-localized-support" function (:arguments ("buffer")) nil [70348 70674])
            ("speedbar-add-localized-speedbar-support" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [70676 72127])
            ("speedbar-remove-localized-speedbar-support" function (:arguments ("buffer")) nil [72129 72478])
            ("speedbar-file-lists" function (:arguments ("directory")) nil [72511 73799])
            ("speedbar-directory-buttons" function (:arguments ("directory" "_index")) nil [73801 76185])
            ("speedbar-make-tag-line" function (:arguments ("exp-button-type" "exp-button-char" "exp-button-function" "exp-button-data" "tag-button" "tag-button-function" "tag-button-data" "tag-button-face" "depth")) nil [76187 78799])
            ("speedbar-change-expand-button-char" function (:arguments ("char")) nil [78801 79327])
            ("speedbar-insert-files-at-point" function (:arguments ("files" "level")) nil [79357 80375])
            ("speedbar-default-directory-list" function (:arguments ("directory" "index")) nil [80377 81292])
            ("speedbar-generic-list-group-p" function (:arguments ("sublst")) nil [81768 82292])
            ("speedbar-generic-list-positioned-group-p" function (:arguments ("sublst")) nil [82294 82746])
            ("speedbar-generic-list-tag-p" function (:arguments ("sublst")) nil [82748 83181])
            ("speedbar-sort-tag-hierarchy" function (:arguments ("lst")) nil [83183 83336])
            ("speedbar-try-completion" function (:arguments ("string" "alist")) nil [83338 83615])
            ("speedbar-prefix-group-tag-hierarchy" function (:arguments ("lst")) nil [83617 88637])
            ("speedbar-trim-words-tag-hierarchy" function (:arguments ("lst")) nil [88639 89830])
            ("speedbar-simple-group-tag-hierarchy" function (:arguments ("lst")) nil [89832 90337])
            ("speedbar-create-tag-hierarchy" function (:arguments ("lst")) nil [90339 90970])
            ("speedbar-generic-list-group-expand-button-type" variable (:default-value (quote curly)) nil [90972 91168])
            ("speedbar-generic-list-tag-button-type" variable nil nil [91170 91357])
            ("speedbar-insert-generic-list" function (:arguments ("level" "lst" "expand-fun" "find-fun")) nil [91359 93401])
            ("speedbar-insert-imenu-list" function (:arguments ("indent" "lst")) nil [93403 93595])
            ("speedbar-insert-etags-list" function (:arguments ("indent" "lst")) nil [93597 93789])
            ("speedbar-update-contents" function (:user-visible-flag t) nil [93815 94453])
            ("speedbar-update-localized-contents" function nil nil [94455 95972])
            ("speedbar-update-directory-contents" function nil nil [95974 98999])
            ("speedbar-update-special-contents" function nil nil [99001 99962])
            ("speedbar-set-timer" function (:arguments ("timeout")) nil [99964 100567])
            ("speedbar-timer-fn" function nil nil [100569 102641])
            ("speedbar-stealthy-update-recurse" variable nil nil [102672 102771])
            ("speedbar-stealthy-updates" function nil nil [102773 103282])
            ("speedbar-reset-scanners" function nil nil [103284 103593])
            ("speedbar-find-selected-file" function (:arguments ("file")) nil [103595 104281])
            ("speedbar-clear-current-file" function nil nil [104283 104678])
            ("speedbar-update-current-file" function nil nil [104680 107066])
            ("speedbar-add-indicator" function (:arguments ("indicator-string" "replace-this")) nil [107068 108178])
            ("speedbar-check-read-only" function nil nil [108180 109341])
            ("speedbar-check-vc" function nil nil [109343 111065])
            ("speedbar-check-vc-this-line" function (:arguments ("depth")) nil [111067 111710])
            ("speedbar-vc-check-dir-p" function (:arguments ("directory")) nil [111712 112177])
            ("speedbar-this-file-in-vc" function (:arguments ("directory" "name")) nil [112179 112620])
            ("speedbar-check-objects" function nil nil [112646 113842])
            ("speedbar-check-obj-this-line" function (:arguments ("depth")) nil [113844 115085])
            ("speedbar-position-cursor-on-line" function nil nil [115113 115342])
            ("speedbar-click" function (:arguments ("e")) nil [115344 115760])
            ("speedbar-do-function-pointer" function nil nil [115762 116833])
            ("speedbar-line-text" function (:arguments ("p")) nil [116881 117264])
            ("speedbar-line-token" function (:arguments ("p")) nil [117266 117744])
            ("speedbar-line-file" function (:arguments ("p")) nil [117746 118252])
            ("speedbar-goto-this-file" function (:arguments ("file")) nil [118254 119499])
            ("speedbar-line-directory" function (:arguments ("depth")) nil [119501 119977])
            ("speedbar-files-line-directory" function (:arguments ("depth")) nil [119979 121094])
            ("speedbar-directory-line" function (:arguments ("directory")) nil [121096 121993])
            ("speedbar-edit-line" function (:user-visible-flag t) nil [121995 122438])
            ("speedbar-expand-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [122440 122881])
            ("speedbar-flush-expand-line" function (:user-visible-flag t) nil [122883 123034])
            ("speedbar-contract-line" function (:user-visible-flag t) nil [123036 123342])
            ("speedbar-toggle-line-expansion" function (:user-visible-flag t) nil [123344 123671])
            ("speedbar-expand-line-descendants" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [123673 124251])
            ("speedbar-contract-line-descendants" function (:user-visible-flag t) nil [124253 124513])
            ("speedbar-find-file" function (:arguments ("text" "_token" "indent")) nil [124515 125377])
            ("speedbar-dir-follow" function (:arguments ("text" "_token" "indent")) nil [125379 126144])
            ("speedbar-delete-subblock" function (:arguments ("indent")) nil [126146 126592])
            ("speedbar-dired" function (:arguments ("text" "token" "indent")) nil [126594 128037])
            ("speedbar-directory-buttons-follow" function (:arguments ("_text" "token" "_indent")) nil [128039 128629])
            ("speedbar-tag-file" function (:arguments ("text" "token" "indent")) nil [128631 129610])
            ("speedbar-tag-find" function (:arguments ("_text" "token" "indent")) nil [129612 130370])
            ("speedbar-tag-expand" function (:arguments ("text" "token" "indent")) nil [130372 131144])
            ("speedbar-select-frame-method" variable (:default-value (quote attached)) nil [131193 131538])
            ("speedbar-find-file-in-frame" function (:arguments ("file")) nil [131540 132162])
            ("speedbar-center-buffer-smartly" function nil nil [132189 134249])
            ("speedbar-fetch-dynamic-tags" function (:arguments ("file")) nil [134296 135395])
            ("if" code nil nil [135428 136125])
            ("speedbar-fetch-etags-parse-list" variable (:default-value (quote (("\\.\\([cChH]\\|c\\+\\+\\|cpp\\|cc\\|hh\\|java\\|cxx\\|hxx\\)\\'" . speedbar-parse-c-or-c++tag) ("^\\.emacs$\\|.\\(el\\|l\\|lsp\\)\\'" . "def[^i]+\\s-+\\(\\(\\w\\|[-_]\\)+\\)\\s-*") ("\\.tex\\'" . speedbar-parse-tex-string) ("\\.p\\'" . "\\(\\(FUNCTION\\|function\\|PROCEDURE\\|procedure\\)\\s-+\\([a-zA-Z0-9_.:]+\\)\\)\\s-*(?^?")))) nil [136192 137210])
            ("speedbar-fetch-etags-command" variable (:default-value "etags") nil [137212 137397])
            ("speedbar-fetch-etags-arguments" variable (:default-value (quote ("-D" "-I" "-o" "-"))) nil [137399 137782])
            ("speedbar-toggle-etags" function
               (:user-visible-flag t
                :arguments ("flag"))
                nil [137784 138673])
            ("speedbar-fetch-dynamic-etags" function (:arguments ("file")) nil [138675 140122])
            ("speedbar-extract-one-symbol" function (:arguments ("expr")) nil [140779 141491])
            ("speedbar-parse-c-or-c++tag" function nil nil [141493 142116])
            ("speedbar-parse-tex-string" function nil nil [142118 142471])
            ("speedbar-buffers-key-map" variable nil nil [142503 142590])
            ("if" code nil nil [142592 143317])
            ("speedbar-buffer-easymenu-definition" variable (:default-value (quote (["Jump to buffer" speedbar-edit-line t] ["Expand File Tags" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Flush Cache & Expand" speedbar-flush-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract File Tags" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))] "----" ["Kill Buffer" speedbar-buffer-kill-buffer (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.[-+?]. "))] ["Revert Buffer" speedbar-buffer-revert-buffer (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.[-+?]. "))]))) nil [143319 144138])
            ("speedbar-buffer-buttons" function (:arguments ("_directory" "_zero")) nil [144140 144370])
            ("speedbar-buffer-buttons-temp" function (:arguments ("_directory" "_zero")) nil [144372 144605])
            ("speedbar-buffer-buttons-engine" function (:arguments ("temp")) nil [144607 146340])
            ("speedbar-buffers-tail-notes" function (:arguments ("buffer")) nil [146342 146584])
            ("speedbar-buffers-item-info" function nil nil [146586 147096])
            ("speedbar-buffers-line-directory" function (:arguments ("_depth")) nil [147098 147695])
            ("speedbar-buffer-click" function (:arguments ("text" "token" "_indent")) nil [147697 148144])
            ("speedbar-buffer-kill-buffer" function (:user-visible-flag t) nil [148146 148460])
            ("speedbar-buffer-revert-buffer" function (:user-visible-flag t) nil [148462 148968])
            ("speedbar-highlight-one-tag-line" variable nil nil [149008 149124])
            ("speedbar-highlight-one-tag-line" function nil nil [149126 149566])
            ("speedbar-unhighlight-one-tag-line" function nil nil [149568 149938])
            ("speedbar-recenter-to-top" function nil nil [149940 150060])
            ("speedbar-recenter" function nil nil [150062 150198])
            ("speedbar-button-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "green4") (((class color) (background dark)) :foreground "green3")))
                :type "face")
                nil [150232 150454])
            ("speedbar-file-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "cyan4") (((class color) (background dark)) :foreground "cyan") (t :weight bold)))
                :type "face")
                nil [150456 150713])
            ("speedbar-directory-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "blue4") (((class color) (background dark)) :foreground "light blue")))
                :type "face")
                nil [150715 150956])
            ("speedbar-tag-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "brown") (((class color) (background dark)) :foreground "yellow")))
                :type "face")
                nil [150958 151181])
            ("speedbar-selected-face" variable
               (:default-value (quote ((((class color) (background light)) :foreground "red" :underline t) (((class color) (background dark)) :foreground "red" :underline t) (t :underline t)))
                :type "face")
                nil [151183 151474])
            ("speedbar-highlight-face" variable
               (:default-value (quote ((((class color) (background light)) :background "green") (((class color) (background dark)) :background "sea green")))
                :type "face")
                nil [151476 151736])
            ("speedbar-separator-face" variable
               (:default-value (quote ((((class color) (background light)) :background "blue" :foreground "white" :overline "gray") (((class color) (background dark)) :background "blue" :foreground "white" :overline "gray") (((class grayscale monochrome) (background light)) :background "black" :foreground "white" :overline "white") (((class grayscale monochrome) (background dark)) :background "white" :foreground "black" :overline "black")))
                :type "face")
                nil [151738 152391])
            ("add-hook" code nil nil [152414 152513])
            ("and" code nil nil [152569 152924])
            ("define-obsolete-variable-alias" code nil nil [152965 153071])
            ("define-obsolete-function-alias" code nil nil [153073 153187])
            ("define-obsolete-function-alias" code nil nil [153189 153275])
            ("define-obsolete-function-alias" code nil nil [153277 153379])
            ("define-obsolete-function-alias" code nil nil [153381 153467])
            ("define-obsolete-function-alias" code nil nil [153469 153571])
            ("speedbar" package nil nil [153573 153592])
            ("run-hooks" code nil nil [153617 153648]))          
      :file "speedbar.el.gz"
      :pointmax 153673
      :fsize 39881
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "wid-edit.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1860 1877])
            ("widget-event-point" function (:arguments ("event")) nil [1899 2033])
            ("widget-button-release-event-p" function (:arguments ("event")) nil [2035 2322])
            ("widgets" customgroup (:user-visible-flag t) nil [2344 2555])
            ("widget-documentation" customgroup (:user-visible-flag t) nil [2557 2672])
            ("widget-faces" customgroup (:user-visible-flag t) nil [2674 2773])
            ("widget-documentation-face" variable (:default-value (quote widget-documentation)) nil [2775 2954])
            ("widget-documentation" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "lime green")) (((class color) (background light)) (:foreground "dark green")) (t nil)))
                :type "face")
                nil [2956 3246])
            ("define-obsolete-face-alias" code nil nil [3247 3333])
            ("widget-button-face" variable (:default-value (quote widget-button)) nil [3335 3486])
            ("widget-button" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [3488 3590])
            ("define-obsolete-face-alias" code nil nil [3591 3661])
            ("widget-mouse-face" variable (:default-value (quote highlight)) nil [3663 3803])
            ("widget-field" variable
               (:default-value (quote ((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [3999 4333])
            ("define-obsolete-face-alias" code nil nil [4334 4402])
            ("widget-single-line-field" variable
               (:default-value (quote ((((type tty)) :background "green3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic)))
                :type "face")
                nil [4404 4827])
            ("define-obsolete-face-alias" code nil nil [4828 4922])
            ("widget-princ-to-string" function (:arguments ("object")) nil [5417 5654])
            ("widget-clear-undo" function nil nil [5656 5780])
            ("widget-menu-max-size" variable (:default-value 40) nil [5782 5951])
            ("widget-menu-max-shortcuts" variable (:default-value 40) nil [5953 6161])
            ("widget-menu-minibuffer-flag" variable nil nil [6163 6365])
            ("widget-choose" function (:arguments ("title" "items" "event")) nil [6367 9983])
            ("widget-field-add-space" variable (:constant-flag t) nil [10146 10334])
            ("widget-field-use-before-change" variable (:default-value t) nil [10336 10564])
            ("widget-specify-field" function (:arguments ("widget" "from" "to")) nil [10566 12678])
            ("widget-specify-secret" function (:arguments ("field")) nil [12680 13302])
            ("widget-specify-button" function (:arguments ("widget" "from" "to")) nil [13304 14614])
            ("widget-mouse-help" function (:arguments ("_window" "overlay" "_point")) nil [14616 14973])
            ("widget-specify-sample" function (:arguments ("widget" "from" "to")) nil [14975 15283])
            ("widget-specify-doc" function (:arguments ("widget" "from" "to")) nil [15285 15626])
            ("widget-specify-insert" function (:arguments ("form")) nil [15628 15915])
            ("widget-inactive" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15917 16026])
            ("define-obsolete-face-alias" code nil nil [16027 16103])
            ("widget-specify-inactive" function (:arguments ("widget" "from" "to")) nil [16105 16681])
            ("widget-overlay-inactive" function (:arguments ("_junk")) nil [16683 16846])
            ("widget-specify-active" function (:arguments ("widget")) nil [16849 17077])
            ("widget-type" function (:arguments ("widget")) nil [17103 17203])
            ("widgetp" function (:arguments ("widget")) nil [17220 17426])
            ("widget-get-indirect" function (:arguments ("widget" "property")) nil [17428 17701])
            ("widget-member" function (:arguments ("widget" "property")) nil [17703 17939])
            ("widget-value" function (:arguments ("widget")) nil [17941 18089])
            ("widget-value-set" function (:arguments ("widget" "value")) nil [18091 18266])
            ("widget-default-get" function (:arguments ("widget")) nil [18268 18789])
            ("widget-match-inline" function (:arguments ("widget" "vals")) nil [18791 19070])
            ("widget-apply-action" function (:arguments ("widget" "event")) nil [19072 19312])
            ("widget-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [19385 19930])
            ("widget-get-sibling" function (:arguments ("widget")) nil [19932 20344])
            ("widget-map-buttons" function (:arguments ("function" "buffer" "maparg")) nil [20346 21010])
            ("widget-image-directory" variable (:default-value (file-name-as-directory (expand-file-name "images/custom" data-directory))) nil [21025 21302])
            ("widget-image-enable" variable (:default-value t) nil [21304 21451])
            ("widget-image-conversion" variable (:default-value (quote ((xpm ".xpm") (gif ".gif") (png ".png") (jpeg ".jpg" ".jpeg") (xbm ".xbm")))) nil [21453 21802])
            ("widget-image-find" function (:arguments ("image")) nil [21804 22630])
            ("widget-button-pressed-face" variable (:default-value (quote widget-button-pressed)) nil [22632 22807])
            ("widget-image-insert" function (:arguments ("widget" "tag" "image" "_down" "_inactive")) nil [22809 23398])
            ("widget-move-and-invoke" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [23400 23677])
            ("widget-button" customgroup (:user-visible-flag t) nil [23693 23781])
            ("widget-button-prefix" variable nil nil [23783 23897])
            ("widget-button-suffix" variable nil nil [23899 24013])
            ("widget-create" function (:arguments ("type" "args")) nil [24053 24269])
            ("widget-create-child-and-convert" function (:arguments ("parent" "type" "args")) nil [24271 24791])
            ("widget-create-child" function (:arguments ("parent" "type")) nil [24793 25182])
            ("widget-create-child-value" function (:arguments ("parent" "type" "value")) nil [25184 25680])
            ("widget-delete" function (:arguments ("widget")) nil [25697 25778])
            ("widget-copy" function (:arguments ("widget")) nil [25780 25886])
            ("widget-convert" function (:arguments ("type" "args")) nil [25888 27774])
            ("widget-insert" function (:arguments ("args")) nil [27791 27981])
            ("widget-convert-text" function (:arguments ("type" "from" "to" "button-from" "button-to" "args")) nil [27983 28783])
            ("widget-convert-button" function (:arguments ("type" "from" "to" "args")) nil [28785 29164])
            ("widget-leave-text" function (:arguments ("widget")) nil [29166 29783])
            ("define-obsolete-function-alias" code nil nil [30026 30112])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [30129 30926])
            ("widget-global-map" variable (:default-value global-map) nil [30928 31025])
            ("make-variable-buffer-local" code nil nil [31026 31073])
            ("widget-field-keymap" variable (:default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" (quote widget-kill-line)) (define-key map "\211" (quote widget-complete)) (define-key map "" (quote widget-field-activate)) (define-key map "" (quote widget-end-of-line)) map)) nil [31075 31575])
            ("widget-text-keymap" variable (:default-value (let ((map (copy-keymap widget-keymap))) (define-key map "" (quote widget-end-of-line)) map)) nil [31577 31928])
            ("widget-field-activate" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [31930 32217])
            ("widget-button-pressed" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:weight bold :underline t))))
                :type "face")
                nil [32219 32461])
            ("define-obsolete-face-alias" code nil nil [32462 32550])
            ("widget-button-click-moves-point" variable nil nil [32552 32749])
            ("widget-button-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [32751 36713])
            ("widget-button-press" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [36715 37048])
            ("widget-tabable-at" function (:arguments ("pos")) nil [37050 37336])
            ("widget-use-overlay-change" variable (:default-value t) nil [37338 37469])
            ("widget-move" function (:arguments ("arg")) nil [37471 38741])
            ("widget-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38743 38939])
            ("widget-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [38941 39147])
            ("defalias" code nil nil [39270 39325])
            ("widget-end-of-line" function (:user-visible-flag t) nil [39327 39924])
            ("widget-kill-line" function (:user-visible-flag t) nil [39926 40244])
            ("widget-narrow-to-field" function (:user-visible-flag t) nil [40246 40443])
            ("widget-complete" function (:user-visible-flag t) nil [40585 41136])
            ("widget-completions-at-point" function nil nil [41390 41540])
            ("widget-field-new" variable nil nil [41570 41660])
            ("make-variable-buffer-local" code nil nil [41661 41707])
            ("widget-field-list" variable nil nil [41709 41786])
            ("make-variable-buffer-local" code nil nil [41787 41834])
            ("widget-at" function (:arguments ("pos")) nil [41836 41998])
            ("widget-setup" function nil nil [42015 42619])
            ("widget-field-last" variable nil nil [42621 42651])
            ("make-variable-buffer-local" code nil nil [42684 42731])
            ("widget-field-was" variable nil nil [42733 42762])
            ("make-variable-buffer-local" code nil nil [42801 42847])
            ("widget-field-at" function (:arguments ("pos")) nil [42849 43084])
            ("widget-field-buffer" function (:arguments ("widget")) nil [43086 43342])
            ("widget-field-start" function (:arguments ("widget")) nil [43344 43555])
            ("widget-field-end" function (:arguments ("widget")) nil [43557 44903])
            ("widget-field-text-end" function (:arguments ("widget")) nil [44905 45356])
            ("widget-field-find" function (:arguments ("pos")) nil [45358 45785])
            ("widget-before-change" function (:arguments ("from" "to")) nil [45787 46506])
            ("widget-add-change" function nil nil [46508 46722])
            ("widget-after-change" function (:arguments ("from" "to" "_old")) nil [46724 47748])
            ("widget-parent-action" function (:arguments ("widget" "event")) nil [47842 48059])
            ("widget-children-value-delete" function (:arguments ("widget")) nil [48061 48333])
            ("widget-children-validate" function (:arguments ("widget")) nil [48335 48631])
            ("widget-child-value-get" function (:arguments ("widget")) nil [48633 48787])
            ("widget-child-value-inline" function (:arguments ("widget")) nil [48789 48967])
            ("widget-child-validate" function (:arguments ("widget")) nil [48969 49140])
            ("widget-type-value-create" function (:arguments ("widget")) nil [49142 49683])
            ("widget-type-default-get" function (:arguments ("widget")) nil [49685 49921])
            ("widget-type-match" function (:arguments ("widget" "value")) nil [49923 50164])
            ("widget-types-copy" function (:arguments ("widget")) nil [50166 50327])
            ("widget-types-convert-widget" function (:arguments ("widget")) nil [50380 50560])
            ("widget-value-convert-widget" function (:arguments ("widget")) nil [50562 50979])
            ("widget-value-value-get" function (:arguments ("widget")) nil [50981 51091])
            ("define-widget" code nil nil [51120 52209])
            ("widget--completing-widget" variable nil nil [52211 52245])
            ("widget-default-completions" function (:arguments ("widget")) nil [52247 52889])
            ("widget-default-create" function (:arguments ("widget")) nil [52891 55285])
            ("widget-default-format-handler" function (:arguments ("_widget" "escape")) nil [55287 55380])
            ("widget-default-button-face-get" function (:arguments ("widget")) nil [55382 55643])
            ("widget-default-mouse-face-get" function (:arguments ("widget")) nil [55645 55900])
            ("widget-default-sample-face-get" function (:arguments ("widget")) nil [55902 56007])
            ("widget-default-delete" function (:arguments ("widget")) nil [56009 56942])
            ("widget-default-value-set" function (:arguments ("widget" "value")) nil [56944 57800])
            ("widget-default-value-inline" function (:arguments ("widget")) nil [57802 57988])
            ("widget-default-default-get" function (:arguments ("widget")) nil [57990 58080])
            ("widget-default-menu-tag-get" function (:arguments ("widget")) nil [58082 58284])
            ("widget-default-active" function (:arguments ("widget")) nil [58286 58578])
            ("widget-default-deactivate" function (:arguments ("widget")) nil [58580 58768])
            ("widget-default-action" function (:arguments ("widget" "event")) nil [58770 58983])
            ("widget-default-notify" function (:arguments ("widget" "_child" "event")) nil [58985 59118])
            ("widget-default-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [59120 59244])
            ("widget-docstring" function (:arguments ("widget")) nil [59246 60259])
            ("define-widget" code nil nil [60285 60633])
            ("widget-item-value-create" function (:arguments ("widget")) nil [60635 60782])
            ("widget-item-match" function (:arguments ("widget" "value")) nil [60784 60904])
            ("widget-item-match-inline" function (:arguments ("widget" "vals")) nil [60906 61230])
            ("widget-sublist" function (:arguments ("list" "start" "end")) nil [61232 61586])
            ("widget-item-action" function (:arguments ("widget" "event")) nil [61588 61709])
            ("widget-push-button-prefix" variable (:default-value "[") nil [61960 62080])
            ("widget-push-button-suffix" variable (:default-value "]") nil [62082 62202])
            ("define-widget" code nil nil [62204 62369])
            ("widget-push-button-value-create" function (:arguments ("widget")) nil [62371 62765])
            ("widget-link-prefix" variable (:default-value "[") nil [62917 63028])
            ("widget-link-suffix" variable (:default-value "]") nil [63030 63141])
            ("define-widget" code nil nil [63143 63344])
            ("define-widget" code nil nil [63375 63470])
            ("widget-info-link-action" function (:arguments ("widget" "_event")) nil [63472 63604])
            ("define-widget" code nil nil [63634 63726])
            ("widget-url-link-action" function (:arguments ("widget" "_event")) nil [63728 63859])
            ("define-widget" code nil nil [63894 64002])
            ("widget-function-link-action" function (:arguments ("widget" "_event")) nil [64004 64152])
            ("define-widget" code nil nil [64187 64295])
            ("widget-variable-link-action" function (:arguments ("widget" "_event")) nil [64297 64445])
            ("define-widget" code nil nil [64476 64565])
            ("widget-file-link-action" function (:arguments ("widget" "_event")) nil [64567 64699])
            ("define-widget" code nil nil [64739 64866])
            ("widget-emacs-library-link-action" function (:arguments ("widget" "_event")) nil [64868 65040])
            ("define-widget" code nil nil [65083 65230])
            ("widget-emacs-commentary-link-action" function (:arguments ("widget" "_event")) nil [65232 65416])
            ("define-widget" code nil nil [65452 66267])
            ("widget-field-history" variable nil nil [66269 66341])
            ("widget-field-prompt-internal" function (:arguments ("_widget" "prompt" "initial" "history")) nil [66343 66584])
            ("widget-field-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [66586 66927])
            ("widget-edit-functions" variable nil nil [66929 66963])
            ("widget-field-action" function (:arguments ("widget" "_event")) nil [66965 67116])
            ("widget-field-validate" function (:arguments ("widget")) nil [67118 67313])
            ("widget-field-value-set" function (:arguments ("widget" "value")) nil [67315 67672])
            ("widget-field-value-create" function (:arguments ("widget")) nil [67674 68509])
            ("widget-field-value-delete" function (:arguments ("widget")) nil [68511 68910])
            ("widget-field-value-get" function (:arguments ("widget" "no-truncate")) nil [68912 69717])
            ("widget-field-match" function (:arguments ("_widget" "value")) nil [69719 69802])
            ("define-widget" code nil nil [69828 69921])
            ("define-widget" code nil nil [69954 70571])
            ("widget-choice-value-create" function (:arguments ("widget")) nil [70573 71593])
            ("widget-choice-default-get" function (:arguments ("widget")) nil [71595 71731])
            ("widget-choice-toggle" variable nil nil [71733 71969])
            ("widget-choice-mouse-down-action" function (:arguments ("widget" "_event")) nil [71971 72590])
            ("widget-choice-action" function (:arguments ("widget" "event")) nil [72592 74035])
            ("widget-choice-validate" function (:arguments ("widget")) nil [74037 74263])
            ("widget-choice-match" function (:arguments ("widget" "value")) nil [74265 74554])
            ("widget-choice-match-inline" function (:arguments ("widget" "vals")) nil [74556 74851])
            ("define-widget" code nil nil [74879 75097])
            ("widget-toggle-value-create" function (:arguments ("widget")) nil [75099 75468])
            ("widget-toggle-action" function (:arguments ("widget" "event")) nil [75470 75696])
            ("define-widget" code nil nil [75726 76139])
            ("widget-checkbox-action" function (:arguments ("widget" "event")) nil [76141 76501])
            ("define-widget" code nil nil [76532 76943])
            ("widget-checklist-value-create" function (:arguments ("widget")) nil [76945 77268])
            ("widget-checklist-add-item" function (:arguments ("widget" "type" "chosen")) nil [77270 78899])
            ("widget-checklist-match" function (:arguments ("widget" "vals")) nil [78901 79082])
            ("widget-checklist-match-inline" function (:arguments ("widget" "vals")) nil [79084 79736])
            ("widget-checklist-match-find" function (:arguments ("widget" "vals")) nil [79738 80399])
            ("widget-checklist-match-up" function (:arguments ("args" "vals")) nil [80401 80684])
            ("widget-checklist-value-get" function (:arguments ("widget")) nil [80686 81049])
            ("widget-checklist-validate" function (:arguments ("widget")) nil [81051 81430])
            ("define-widget" code nil nil [81457 81540])
            ("define-widget" code nil nil [81573 81724])
            ("define-widget" code nil nil [81758 82010])
            ("widget-radio-button-notify" function (:arguments ("widget" "_child" "event")) nil [82012 82161])
            ("define-widget" code nil nil [82202 82752])
            ("widget-radio-value-create" function (:arguments ("widget")) nil [82754 82974])
            ("widget-radio-add-item" function (:arguments ("widget" "type")) nil [82976 84635])
            ("widget-radio-value-get" function (:arguments ("widget")) nil [84637 84799])
            ("widget-radio-chosen" function (:arguments ("widget")) nil [84801 85169])
            ("widget-radio-value-inline" function (:arguments ("widget")) nil [85171 85550])
            ("widget-radio-value-set" function (:arguments ("widget" "value")) nil [85552 86239])
            ("widget-radio-validate" function (:arguments ("widget")) nil [86241 86646])
            ("widget-radio-action" function (:arguments ("widget" "child" "event")) nil [86648 87275])
            ("define-widget" code nil nil [87310 87523])
            ("widget-insert-button-action" function (:arguments ("widget" "_event")) nil [87525 87718])
            ("define-widget" code nil nil [87753 87947])
            ("widget-delete-button-action" function (:arguments ("widget" "_event")) nil [87949 88138])
            ("define-widget" code nil nil [88332 88928])
            ("widget-editable-list-format-handler" function (:arguments ("widget" "escape")) nil [88930 89388])
            ("widget-editable-list-value-create" function (:arguments ("widget")) nil [89390 90055])
            ("widget-editable-list-value-get" function (:arguments ("widget")) nil [90057 90253])
            ("widget-editable-list-match" function (:arguments ("widget" "value")) nil [90255 90462])
            ("widget-editable-list-match-inline" function (:arguments ("widget" "value")) nil [90464 90791])
            ("widget-editable-list-insert-before" function (:arguments ("widget" "before")) nil [90793 91690])
            ("widget-editable-list-delete-at" function (:arguments ("widget" "child")) nil [91692 92642])
            ("widget-editable-list-entry-create" function (:arguments ("widget" "value" "conv")) nil [92644 94389])
            ("define-widget" code nil nil [94416 94823])
            ("widget-group-value-create" function (:arguments ("widget")) nil [94825 95550])
            ("widget-group-default-get" function (:arguments ("widget")) nil [95552 95690])
            ("widget-group-match" function (:arguments ("widget" "vals")) nil [95692 95885])
            ("widget-group-match-inline" function (:arguments ("widget" "vals")) nil [95887 96304])
            ("define-widget" code nil nil [96336 97013])
            ("defalias" code nil nil [97015 97085])
            ("define-widget" code nil nil [97183 97365])
            ("widget-documentation-link-action" function (:arguments ("widget" "_event")) nil [97367 97841])
            ("widget-documentation-links" variable (:default-value t) nil [97843 97989])
            ("widget-documentation-link-regexp" variable (:default-value "`\\([^
`' ]+\\)'") nil [97991 98211])
            ("widget-documentation-link-p" variable (:default-value (quote intern-soft)) nil [98213 98575])
            ("widget-documentation-link-type" variable (:default-value (quote documentation-link)) nil [98577 98743])
            ("widget-documentation-link-add" function (:arguments ("widget" "from" "to")) nil [98745 99515])
            ("define-widget" code nil nil [99557 99780])
            ("widget-documentation-string-value-create" function (:arguments ("widget")) nil [99782 101269])
            ("widget-documentation-string-indent-to" function (:arguments ("col")) nil [101271 101502])
            ("widget-documentation-string-action" function (:arguments ("widget" "_ignore")) nil [101504 101800])
            ("widget-add-documentation-string-button" function (:arguments ("widget" "args")) nil [101802 102724])
            ("define-widget" code nil nil [102750 102863])
            ("widget-const-prompt-value" function (:arguments ("widget" "_prompt" "_value" "_unbound")) nil [102865 102991])
            ("define-widget" code nil nil [102993 103203])
            ("define-widget" code nil nil [103205 103343])
            ("define-widget" code nil nil [103345 103720])
            ("widget-string-prompt-value-history" variable nil nil [103722 103823])
            ("define-widget" code nil nil [103825 104013])
            ("define-widget" code nil nil [104015 104246])
            ("widget-regexp-match" function (:arguments ("_widget" "value")) nil [104248 104427])
            ("widget-regexp-validate" function (:arguments ("widget")) nil [104429 104683])
            ("define-widget" code nil nil [104685 104998])
            ("widget-file-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [105000 105416])
            ("define-widget" code nil nil [106027 106157])
            ("widget-symbol-prompt-value-history" variable nil nil [106159 106260])
            ("define-widget" code nil nil [106262 106793])
            ("widget-symbol-prompt-internal" function (:arguments ("widget" "prompt" "initial" "history")) nil [106795 107113])
            ("widget-function-prompt-value-history" variable nil nil [107115 107220])
            ("define-widget" code nil nil [107222 107865])
            ("widget-variable-prompt-value-history" variable nil nil [107867 107972])
            ("define-widget" code nil nil [107974 108250])
            ("define-widget" code nil nil [108252 108893])
            ("widget-coding-system-prompt-value" function (:arguments ("widget" "prompt" "value" "_unbound")) nil [108895 109281])
            ("widget-coding-system-action" function (:arguments ("widget" "event")) nil [109283 109582])
            ("widget-key-sequence-prompt-value-history" variable nil nil [109637 109750])
            ("widget-key-sequence-default-value" variable (:default-value [ignore]) nil [109752 109848])
            ("widget-key-sequence-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map widget-field-keymap) (define-key map [(control 113)] (quote widget-key-sequence-read-event)) map)) nil [109850 110043])
            ("define-widget" code nil nil [110045 110744])
            ("widget-key-sequence-read-event" function (:arguments ("ev")) nil [110746 111868])
            ("widget-key-sequence-validate" function (:arguments ("widget")) nil [111870 112112])
            ("widget-key-sequence-value-to-internal" function (:arguments ("widget" "value")) nil [112114 112316])
            ("widget-key-sequence-value-to-external" function (:arguments ("_widget" "value")) nil [112318 112526])
            ("define-widget" code nil nil [112530 112938])
            ("widget-sexp-value-to-internal" function (:arguments ("_widget" "value")) nil [112940 113288])
            ("widget-sexp-validate" function (:arguments ("widget")) nil [113290 114281])
            ("widget-sexp-prompt-value-history" variable nil nil [114283 114380])
            ("widget-sexp-prompt-value" function (:arguments ("widget" "prompt" "value" "unbound")) nil [114382 114804])
            ("define-widget" code nil nil [114806 115186])
            ("widget-restricted-sexp-match" function (:arguments ("widget" "value")) nil [115188 115647])
            ("define-widget" code nil nil [115650 115822])
            ("define-widget" code nil nil [115824 116047])
            ("define-widget" code nil nil [116049 116259])
            ("define-widget" code nil nil [116261 116801])
            ("define-widget" code nil nil [116803 116886])
            ("define-widget" code nil nil [116888 117140])
            ("widget-vector-match" function (:arguments ("widget" "value")) nil [117142 117296])
            ("define-widget" code nil nil [117298 117575])
            ("widget-cons-match" function (:arguments ("widget" "value")) nil [117577 117727])
            ("define-widget" code nil nil [117781 119837])
            ("define-widget" code nil nil [119888 120067])
            ("widget-plist-value-type" variable nil nil [120069 120101])
            ("widget-plist-convert-widget" function (:arguments ("widget")) nil [120121 120653])
            ("widget-plist-convert-option" function (:arguments ("option")) nil [120655 121079])
            ("define-widget" code nil nil [121132 121313])
            ("widget-alist-value-type" variable nil nil [121315 121347])
            ("widget-alist-convert-widget" function (:arguments ("widget")) nil [121367 121899])
            ("widget-alist-convert-option" function (:arguments ("option")) nil [121901 122314])
            ("define-widget" code nil nil [122317 122574])
            ("widget-choice-prompt-value" function (:arguments ("widget" "prompt" "value" "_unbound")) nil [122576 123700])
            ("define-widget" code nil nil [123703 123865])
            ("define-widget" code nil nil [123867 123989])
            ("define-widget" code nil nil [123991 124099])
            ("define-widget" code nil nil [124101 124408])
            ("widget-boolean-prompt-value" function (:arguments ("_widget" "prompt" "_value" "_unbound")) nil [124410 124521])
            ("define-widget" code nil nil [124565 124935])
            ("widget-color-value-create" function (:arguments ("widget")) nil [124937 125175])
            ("widget-color--choose-action" function (:arguments ("widget" "_event")) nil [125177 125603])
            ("widget-color-sample-face-get" function (:arguments ("widget")) nil [125605 125844])
            ("widget-color-action" function (:arguments ("widget" "event")) nil [125846 126190])
            ("widget-color-notify" function (:arguments ("widget" "child" "event")) nil [126192 126446])
            ("widget-echo-help" function (:arguments ("pos")) nil [126468 126765])
            ("wid-edit" package nil nil [126781 126800]))          
      :file "wid-edit.el.gz"
      :pointmax 126828
      :fsize 30324
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dframe.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dframe-version" variable (:default-value "1.3") nil [206 291])
            ("x-pointer-hand2" variable nil nil [4905 4929])
            ("x-pointer-top-left-arrow" variable nil nil [4930 4963])
            ("defalias" code nil nil [5008 5219])
            ("dframe" customgroup (:user-visible-flag t) nil [5240 5324])
            ("dframe-have-timer-flag" variable (:default-value (if (fboundp (quote display-graphic-p)) (display-graphic-p) window-system)) nil [5326 5588])
            ("dframe-update-speed" variable (:default-value (if (featurep (quote xemacs)) 2 1)) nil [5590 5900])
            ("dframe-activity-change-focus-flag" variable nil nil [5902 6177])
            ("dframe-after-select-attached-frame-hook" variable nil nil [6179 6324])
            ("dframe-track-mouse-function" variable nil nil [6326 6496])
            ("make-variable-buffer-local" code nil nil [6497 6554])
            ("dframe-help-echo-function" variable nil nil [6556 6731])
            ("make-variable-buffer-local" code nil nil [6732 6787])
            ("dframe-mouse-click-function" variable nil nil [6789 6925])
            ("make-variable-buffer-local" code nil nil [6926 6983])
            ("dframe-mouse-position-function" variable nil nil [6985 7093])
            ("make-variable-buffer-local" code nil nil [7094 7154])
            ("dframe-power-click" variable nil nil [7156 7257])
            ("dframe-timer" variable nil nil [7259 7335])
            ("make-variable-buffer-local" code nil nil [7336 7378])
            ("dframe-attached-frame" variable nil nil [7380 7547])
            ("make-variable-buffer-local" code nil nil [7548 7599])
            ("dframe-controlled" variable nil nil [7601 7745])
            ("make-variable-buffer-local" code nil nil [7746 7793])
            ("dframe-update-keymap" function (:arguments ("map")) nil [7795 9515])
            ("dframe-live-p" function (:arguments ("frame")) nil [9517 9657])
            ("x-sensitive-text-pointer-shape" variable nil nil [9659 9698])
            ("x-pointer-shape" variable nil nil [9699 9723])
            ("dframe-frame-mode" function (:arguments ("arg" "frame-var" "cache-var" "buffer-var" "frame-name" "local-mode-fn" "parameters" "delete-hook" "popup-hook" "create-hook")) nil [9725 16669])
            ("dframe-reposition-frame" function (:arguments ("new-frame" "parent-frame" "location")) nil [16671 17028])
            ("declare-function" code nil nil [17097 17167])
            ("declare-function" code nil nil [17168 17239])
            ("dframe-reposition-frame-emacs" function (:arguments ("new-frame" "parent-frame" "location")) nil [17241 20412])
            ("dframe-reposition-frame-xemacs" function (:arguments ("_new-frame" "_parent-frame" "_location")) nil [20414 20629])
            ("dframe-needed-height" function (:arguments ("frame")) nil [20656 21021])
            ("dframe-detach" function (:arguments ("frame-var" "cache-var" "buffer-var")) nil [21023 21552])
            ("if" code nil nil [21589 21893])
            ("dframe-make-frame-visible-function" variable nil nil [21895 22041])
            ("dframe-iconify-frame-function" variable nil nil [22042 22180])
            ("dframe-delete-frame-function" variable nil nil [22181 22325])
            ("dframe-handle-make-frame-visible" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22327 22714])
            ("dframe-handle-iconify-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22716 23080])
            ("dframe-handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [23082 23586])
            ("dframe-get-focus" function
               (:user-visible-flag t
                :arguments ("frame-var" "activator"))
                nil [23606 24257])
            ("dframe-close-frame" function (:user-visible-flag t) nil [24260 24462])
            ("dframe-current-frame" function (:arguments ("frame-var" "desired-major-mode")) nil [24464 25046])
            ("dframe-attached-frame" function (:arguments ("frame")) nil [25048 25320])
            ("dframe-select-attached-frame" function (:arguments ("frame")) nil [25322 25782])
            ("dframe-with-attached-buffer" function (:arguments ("forms")) nil [25784 26106])
            ("dframe-maybee-jump-to-attached-frame" function nil nil [26108 26433])
            ("dframe-suppress-message-flag" variable nil nil [26436 26546])
            ("dframe-message" function (:arguments ("fmt" "args")) nil [26548 26986])
            ("dframe-y-or-n-p" function (:arguments ("prompt")) nil [26988 27415])
            ("dframe-client-functions" variable nil nil [27845 27934])
            ("dframe-set-timer" function (:arguments ("timeout" "fn" "_null-on-error")) nil [27936 28942])
            ("dframe-set-timer-internal" function (:arguments ("timeout" "_null-on-error")) nil [28944 29414])
            ("dframe-timer-fn" function nil nil [29416 29693])
            ("dframe-pass-event-to-popup-mode-menu" variable
               (:constant-flag t
                :default-value (let (max-args) (and (fboundp (quote popup-mode-menu)) (fboundp (quote function-max-args)) (setq max-args (function-max-args (quote popup-mode-menu))) (not (zerop max-args)))))
                nil [29727 30034])
            ("defalias" code nil nil [30252 31627])
            ("defalias" code nil nil [31677 31994])
            ("dframe-track-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31996 32355])
            ("dframe-track-mouse-xemacs" function (:arguments ("event")) nil [32357 32659])
            ("dframe-help-echo" function (:arguments ("_window" "buffer" "position")) nil [32661 33153])
            ("dframe-mouse-set-point" function (:arguments ("e")) nil [33155 33816])
            ("dframe-quick-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [33818 34101])
            ("dframe-power-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34103 34439])
            ("dframe-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34441 34769])
            ("dframe-double-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34771 35246])
            ("dframe-temp-buffer-show-function" function (:arguments ("buffer")) nil [35424 36164])
            ("dframe-hack-buffer-menu" function
               (:user-visible-flag t
                :arguments ("_e"))
                nil [36166 36934])
            ("dframe-switch-buffer-attached-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [36936 37368])
            ("dframe-mouse-hscroll" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [37515 38136])
            ("dframe" package nil nil [38138 38155]))          
      :file "dframe.el.gz"
      :pointmax 38181
      :fsize 11294
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sb-image.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ezimage" include nil nil [1343 1361])
            ("speedbar-use-images" variable (:default-value ezimage-use-images) nil [1373 1523])
            ("defalias" code nil nil [1525 1566])
            ("speedbar-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("<M>" . ezimage-mail) ("<d>" . ezimage-document-tag) ("<i>" . ezimage-info-tag) (" =>" . ezimage-tag) (" +>" . ezimage-tag-gt) (" ->" . ezimage-tag-v) (">" . ezimage-tag) ("@" . ezimage-tag-type) ("  @" . ezimage-tag-type) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("//" . ezimage-label) ("%" . ezimage-lock)))) nil [1568 2367])
            ("speedbar-insert-image-button-maybe" function (:arguments ("start" "length")) nil [2369 2779])
            ("speedbar-image-dump" function (:user-visible-flag t) nil [2781 3579])
            ("sb-image" package nil nil [3581 3600]))          
      :file "sb-image.el.gz"
      :pointmax 3628
      :fsize 1568
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil))
  :file "!home!marselo!bin!emacs!share!emacs!24.5!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
