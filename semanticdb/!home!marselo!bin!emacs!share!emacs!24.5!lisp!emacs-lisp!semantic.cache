;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "cl-lib.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [3624 3643])
            ("cl--optimize-speed" variable (:default-value 1) nil [3645 3674])
            ("cl--optimize-safety" variable (:default-value 1) nil [3675 3705])
            ("define-obsolete-variable-alias" code nil nil [3722 3933])
            ("cl-custom-print-functions" variable nil nil [3950 4436])
            ("cl-incf" function (:arguments ("place" "x")) nil [4549 4922])
            ("cl-decf" function (:arguments ("place" "x")) nil [4924 5282])
            ("cl-pushnew" function (:arguments ("x" "place" "keys")) nil [5284 6418])
            ("cl--set-elt" function (:arguments ("seq" "n" "val")) nil [6420 6515])
            ("cl--set-buffer-substring" function (:arguments ("start" "end" "val")) nil [6517 6657])
            ("cl--set-substring" function (:arguments ("str" "start" "end" "val")) nil [6659 6943])
            ("defalias" code nil nil [6969 7008])
            ("defalias" code nil nil [7009 7043])
            ("cl--defalias" function (:arguments ("cl-f" "el-f" "doc")) nil [7243 7373])
            ("cl--defalias" code nil nil [7375 7562])
            ("cl--defalias" code nil nil [7564 7761])
            ("cl-multiple-value-list" function (:arguments ("expression")) nil [7763 8048])
            ("cl-multiple-value-apply" function (:arguments ("function" "expression")) nil [8050 8372])
            ("defalias" code nil nil [8374 8561])
            ("cl--defalias" code nil nil [8563 8849])
            ("cl--compiling-file" variable nil nil [8870 8901])
            ("cl--compiling-file" function nil nil [8902 9155])
            ("cl--proclaims-deferred" variable nil nil [9157 9192])
            ("cl-proclaim" function (:arguments ("spec")) nil [9194 9375])
            ("cl-declaim" function (:arguments ("specs")) nil [9377 9787])
            ("cl--random-time" function nil nil [9859 10037])
            ("cl--gensym-counter" variable (:default-value (* (logand (cl--random-time) 1023) 100)) nil [10039 10106])
            ("define-obsolete-function-alias" code nil nil [10123 10186])
            ("cl-plusp" function (:arguments ("number")) nil [10188 10267])
            ("cl-minusp" function (:arguments ("number")) nil [10269 10349])
            ("cl-oddp" function (:arguments ("integer")) nil [10351 10436])
            ("cl-evenp" function (:arguments ("integer")) nil [10438 10525])
            ("cl--random-state" variable (:default-value (vector (quote cl--random-state-tag) -1 30 (cl--random-time))) nil [10527 10609])
            ("cl-most-positive-float" variable (:constant-flag t) nil [10611 10856])
            ("cl-most-negative-float" variable (:constant-flag t) nil [10858 11032])
            ("cl-least-positive-float" variable (:constant-flag t) nil [11034 11276])
            ("cl-least-negative-float" variable (:constant-flag t) nil [11278 11461])
            ("cl-least-positive-normalized-float" variable (:constant-flag t) nil [11463 11875])
            ("cl-least-negative-normalized-float" variable (:constant-flag t) nil [11877 12071])
            ("cl-float-epsilon" variable (:constant-flag t) nil [12073 12328])
            ("cl-float-negative-epsilon" variable (:constant-flag t) nil [12330 12529])
            ("cl--defalias" code nil nil [12557 12599])
            ("declare-function" code nil nil [12601 12664])
            ("cl-mapcar" function (:arguments ("cl-func" "cl-x" "cl-rest")) nil [12666 13387])
            ("cl--defalias" code nil nil [13389 13419])
            ("cl--defalias" code nil nil [13442 13471])
            ("cl--defalias" code nil nil [13472 13503])
            ("cl--defalias" code nil nil [13504 13532])
            ("cl--defalias" code nil nil [13533 13562])
            ("cl--defalias" code nil nil [13564 13640])
            ("cl--defalias" code nil nil [13641 13720])
            ("cl-fifth" function (:arguments ("x")) nil [13722 13873])
            ("cl-sixth" function (:arguments ("x")) nil [13875 14026])
            ("cl-seventh" function (:arguments ("x")) nil [14028 14183])
            ("cl-eighth" function (:arguments ("x")) nil [14185 14338])
            ("cl-ninth" function (:arguments ("x")) nil [14340 14491])
            ("cl-tenth" function (:arguments ("x")) nil [14493 14644])
            ("cl-caaar" function (:arguments ("x")) nil [14646 14794])
            ("cl-caadr" function (:arguments ("x")) nil [14796 14944])
            ("cl-cadar" function (:arguments ("x")) nil [14946 15094])
            ("cl-caddr" function (:arguments ("x")) nil [15096 15244])
            ("cl-cdaar" function (:arguments ("x")) nil [15246 15394])
            ("cl-cdadr" function (:arguments ("x")) nil [15396 15544])
            ("cl-cddar" function (:arguments ("x")) nil [15546 15694])
            ("cl-cdddr" function (:arguments ("x")) nil [15696 15844])
            ("cl-caaaar" function (:arguments ("x")) nil [15846 16014])
            ("cl-caaadr" function (:arguments ("x")) nil [16016 16184])
            ("cl-caadar" function (:arguments ("x")) nil [16186 16354])
            ("cl-caaddr" function (:arguments ("x")) nil [16356 16524])
            ("cl-cadaar" function (:arguments ("x")) nil [16526 16694])
            ("cl-cadadr" function (:arguments ("x")) nil [16696 16864])
            ("cl-caddar" function (:arguments ("x")) nil [16866 17034])
            ("cl-cadddr" function (:arguments ("x")) nil [17036 17204])
            ("cl-cdaaar" function (:arguments ("x")) nil [17206 17374])
            ("cl-cdaadr" function (:arguments ("x")) nil [17376 17544])
            ("cl-cdadar" function (:arguments ("x")) nil [17546 17714])
            ("cl-cdaddr" function (:arguments ("x")) nil [17716 17884])
            ("cl-cddaar" function (:arguments ("x")) nil [17886 18054])
            ("cl-cddadr" function (:arguments ("x")) nil [18056 18224])
            ("cl-cdddar" function (:arguments ("x")) nil [18226 18394])
            ("cl-cddddr" function (:arguments ("x")) nil [18396 18564])
            ("cl-list*" function (:arguments ("arg" "rest")) nil [18895 19403])
            ("cl-ldiff" function (:arguments ("list" "sublist")) nil [19405 19615])
            ("cl-copy-list" function (:arguments ("list")) nil [19617 19913])
            ("declare-function" code nil nil [19970 20024])
            ("declare-function" code nil nil [20025 20081])
            ("declare-function" code nil nil [20082 20139])
            ("declare-function" code nil nil [20140 20194])
            ("declare-function" code nil nil [20195 20237])
            ("cl-adjoin" function (:arguments ("cl-item" "cl-list" "cl-keys")) nil [20239 20858])
            ("cl-subst" function (:arguments ("cl-new" "cl-old" "cl-tree" "cl-keys")) nil [20860 21311])
            ("cl--do-subst" function (:arguments ("cl-new" "cl-old" "cl-tree")) nil [21313 21623])
            ("cl-acons" function (:arguments ("key" "value" "alist")) nil [21625 21788])
            ("cl-pairlis" function (:arguments ("keys" "values" "alist")) nil [21790 22106])
            ("gv-define-simple-setter" code nil nil [22461 22527])
            ("gv-define-setter" code nil nil [22528 22650])
            ("gv-define-simple-setter" code nil nil [22651 22704])
            ("gv-define-setter" code nil nil [22705 22787])
            ("gv-define-simple-setter" code nil nil [22788 22855])
            ("gv-define-simple-setter" code nil nil [22856 22907])
            ("gv-define-simple-setter" code nil nil [22908 22967])
            ("gv-define-simple-setter" code nil nil [22968 23025])
            ("gv-define-simple-setter" code nil nil [23026 23087])
            ("gv-define-setter" code nil nil [23088 23183])
            ("gv-define-simple-setter" code nil nil [23184 23243])
            ("gv-define-simple-setter" code nil nil [23244 23350])
            ("gv-define-simple-setter" code nil nil [23351 23420])
            ("gv-define-simple-setter" code nil nil [23421 23473])
            ("gv-define-setter" code nil nil [23474 23560])
            ("gv-define-setter" code nil nil [23561 23661])
            ("gv-define-setter" code nil nil [23662 23734])
            ("gv-define-setter" code nil nil [23735 23821])
            ("gv-define-setter" code nil nil [23822 23908])
            ("gv-define-simple-setter" code nil nil [23909 23962])
            ("gv-define-simple-setter" code nil nil [23963 24021])
            ("gv-define-simple-setter" code nil nil [24022 24090])
            ("gv-define-simple-setter" code nil nil [24091 24156])
            ("gv-define-simple-setter" code nil nil [24157 24213])
            ("gv-define-simple-setter" code nil nil [24214 24255])
            ("gv-define-simple-setter" code nil nil [24256 24307])
            ("gv-define-simple-setter" code nil nil [24308 24367])
            ("gv-define-simple-setter" code nil nil [24368 24425])
            ("gv-define-simple-setter" code nil nil [24426 24467])
            ("gv-define-simple-setter" code nil nil [24468 24516])
            ("gv-define-simple-setter" code nil nil [24517 24571])
            ("gv-define-setter" code nil nil [24572 24710])
            ("gv-define-simple-setter" code nil nil [24711 24752])
            ("gv-define-simple-setter" code nil nil [24753 24803])
            ("gv-define-setter" code nil nil [24804 24896])
            ("gv-define-setter" code nil nil [24897 24989])
            ("gv-define-setter" code nil nil [24990 25095])
            ("gv-define-simple-setter" code nil nil [25096 25155])
            ("gv-define-simple-setter" code nil nil [25156 25213])
            ("gv-define-simple-setter" code nil nil [25214 25269])
            ("gv-define-simple-setter" code nil nil [25270 25325])
            ("gv-define-simple-setter" code nil nil [25326 25379])
            ("gv-define-simple-setter" code nil nil [25380 25449])
            ("gv-define-simple-setter" code nil nil [25450 25505])
            ("gv-define-simple-setter" code nil nil [25506 25579])
            ("gv-define-setter" code nil nil [25580 25682])
            ("gv-define-setter" code nil nil [25683 25785])
            ("gv-define-simple-setter" code nil nil [25786 25865])
            ("gv-define-simple-setter" code nil nil [25866 25925])
            ("gv-define-expander" code nil nil [26324 26663])
            ("gv-define-expander" code nil nil [26665 27056])
            ("progn" code nil nil [27093 27789])
            ("cl-lib" package nil nil [27791 27808])
            ("or" code nil nil [27809 27935]))          
      :file "cl-lib.el.gz"
      :pointmax 28017
      :fsize 8038
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cl.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("gv" include nil nil [1085 1098])
            ("cl-unload-function" function nil nil [3594 3752])
            ("dolist" code nil nil [3789 4502])
            ("dolist" code nil nil [4504 9695])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9697 9779])
            ("advice-add" code nil nil [9780 9832])
            ("advice-add" code nil nil [9833 9886])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9888 9976])
            ("advice-add" code nil nil [9977 10035])
            ("cl-closure-vars" variable nil nil [10195 10223])
            ("cl--function-convert-cache" variable nil nil [10224 10263])
            ("cl--function-convert" function (:arguments ("f")) nil [10265 12578])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12580 14610])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14612 15142])
            ("flet" function (:arguments ("bindings" "body")) nil [15221 16975])
            ("labels" function (:arguments ("bindings" "body")) nil [16977 17921])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [18117 19007])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [19009 19912])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19914 21529])
            ("make-obsolete" code nil nil [23443 23495])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [23497 24256])
            ("define-obsolete-function-alias" code nil nil [24358 24426])
            ("define-obsolete-variable-alias" code nil nil [24427 24519])
            ("define-obsolete-function-alias" code nil nil [24520 24596])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24734 24883])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24885 24939])
            ("make-obsolete-variable" code nil nil [24940 24995])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24996 25050])
            ("make-obsolete-variable" code nil nil [25051 25106])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [25107 25161])
            ("make-obsolete-variable" code nil nil [25162 25217])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [25218 25272])
            ("make-obsolete-variable" code nil nil [25274 25329])
            ("define-obsolete-function-alias" code nil nil [25330 25396])
            ("define-obsolete-function-alias" code nil nil [25397 25461])
            ("define-obsolete-function-alias" code nil nil [25462 25522])
            ("define-obsolete-function-alias" code nil nil [25523 25583])
            ("define-obsolete-function-alias" code nil nil [25584 25644])
            ("define-obsolete-function-alias" code nil nil [25645 25705])
            ("define-obsolete-function-alias" code nil nil [25706 25766])
            ("define-obsolete-function-alias" code nil nil [25767 25843])
            ("define-obsolete-function-alias" code nil nil [25844 25914])
            ("define-obsolete-function-alias" code nil nil [25915 25993])
            ("define-obsolete-function-alias" code nil nil [25995 26091])
            ("define-obsolete-function-alias" code nil nil [26092 26168])
            ("define-obsolete-function-alias" code nil nil [26169 26242])
            ("define-obsolete-function-alias" code nil nil [26243 26309])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [26311 26466])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26517 27451])
            ("cl" package nil nil [27453 27466])
            ("run-hooks" code nil nil [27468 27493]))          
      :file "cl.el.gz"
      :pointmax 27515
      :fsize 7986
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "easymenu.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("easy-menu-precalculate-equivalent-keybindings" variable nil nil [1135 1656])
            ("make-obsolete-variable" code nil nil [1657 1740])
            ("easy-menu-intern" function (:arguments ("s")) nil [1742 1805])
            ("easy-menu-define" function (:arguments ("symbol" "maps" "doc" "menu")) nil [1822 5443])
            ("easy-menu-binding" function (:arguments ("menu" "item-name")) nil [5445 6207])
            ("easy-menu-do-define" function (:arguments ("symbol" "maps" "doc" "menu")) nil [6224 7169])
            ("easy-menu-filter-return" function (:arguments ("menu" "name")) nil [7171 7957])
            ("easy-menu-avoid-duplicate-keys" variable (:default-value t) nil [7959 8213])
            ("easy-menu-create-menu" function (:arguments ("menu-name" "menu-items")) nil [8230 10302])
            ("easy-menu-button-prefix" variable (:default-value (quote ((radio . :radio) (toggle . :toggle)))) nil [10328 10401])
            ("easy-menu-converted-items-table" variable (:default-value (make-hash-table :test (quote equal))) nil [10403 10474])
            ("easy-menu-convert-item" function (:arguments ("item")) nil [10476 11914])
            ("easy-menu-convert-item-1" function (:arguments ("item")) nil [11916 16300])
            ("easy-menu-define-key" function (:arguments ("menu" "key" "item" "before")) nil [16302 18051])
            ("easy-menu-name-match" function (:arguments ("name" "item")) nil [18053 18649])
            ("easy-menu-always-true-p" function (:arguments ("x")) nil [18651 18824])
            ("easy-menu-item-count" variable nil nil [18826 18857])
            ("easy-menu-make-symbol" function (:arguments ("callback" "noexp")) nil [18859 19488])
            ("easy-menu-change" function (:arguments ("path" "name" "items" "before" "map")) nil [19505 20442])
            ("defalias" code nil nil [20615 20842])
            ("easy-menu-add" function (:arguments ("_menu" "_map")) nil [20844 21220])
            ("add-submenu" function (:arguments ("menu-path" "submenu" "before" "in-menu")) nil [21222 21620])
            ("easy-menu-add-item" function (:arguments ("map" "path" "item" "before")) nil [21622 23514])
            ("easy-menu-item-present-p" function (:arguments ("map" "path" "name")) nil [23516 23822])
            ("easy-menu-remove-item" function (:arguments ("map" "path" "name")) nil [23824 24210])
            ("easy-menu-return-item" function (:arguments ("menu" "name")) nil [24212 25824])
            ("easy-menu-lookup-name" function (:arguments ("map" "name")) nil [25826 26619])
            ("easy-menu-get-map" function (:arguments ("map" "path" "to-modify")) nil [26621 28185])
            ("easymenu" package nil nil [28187 28206]))          
      :file "easymenu.el.gz"
      :pointmax 28234
      :fsize 9094
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "macroexp.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macroexpand-all-environment" variable nil nil [1230 1270])
            ("macroexp--cons" function (:arguments ("car" "cdr" "original-cons")) nil [1272 1485])
            ("macroexp--accumulate" function (:arguments ("var+list" "body")) nil [1719 2775])
            ("macroexp--all-forms" function (:arguments ("forms" "skip")) nil [2777 3118])
            ("macroexp--all-clauses" function (:arguments ("clauses" "skip")) nil [3120 3493])
            ("macroexp--compiler-macro" function (:arguments ("handler" "form")) nil [3495 3690])
            ("macroexp--funcall-if-compiled" function (:arguments ("_form")) nil [3692 4020])
            ("put" code nil nil [4021 4163])
            ("macroexp--compiling-p" function nil nil [4165 4543])
            ("macroexp--warn-and-return" function (:arguments ("msg" "form")) nil [4546 5008])
            ("macroexp--obsolete-warning" function (:arguments ("fun" "obsolescence-data" "type")) nil [5010 5417])
            ("macroexp--expand-all" function (:arguments ("form")) nil [5419 10806])
            ("macroexpand-all" function (:arguments ("form" "environment")) nil [10823 11217])
            ("macroexp-progn" function (:arguments ("exps")) nil [11258 11388])
            ("macroexp-unprogn" function (:arguments ("exp")) nil [11390 11539])
            ("macroexp-let*" function (:arguments ("bindings" "exp")) nil [11541 11782])
            ("macroexp-if" function (:arguments ("test" "then" "else")) nil [11784 12537])
            ("macroexp-let2" function (:arguments ("test" "var" "exp" "exps")) nil [12539 13370])
            ("macroexp--maxsize" function (:arguments ("exp" "size")) nil [13372 13978])
            ("macroexp-small-p" function (:arguments ("exp")) nil [13980 14096])
            ("macroexp--const-symbol-p" function (:arguments ("symbol" "any-value")) nil [14098 14659])
            ("macroexp-const-p" function (:arguments ("exp")) nil [14661 15165])
            ("macroexp-copyable-p" function (:arguments ("exp")) nil [15167 15304])
            ("macroexp--backtrace" function nil nil [15745 16018])
            ("macroexp--trim-backtrace-frame" function (:arguments ("frame")) nil [16020 16507])
            ("macroexp--pending-eager-loads" variable nil nil [16509 16614])
            ("internal-macroexpand-for-load" function (:arguments ("form")) nil [16616 18077])
            ("add-hook" code nil nil [18510 18765])
            ("macroexp" package nil nil [18768 18787]))          
      :file "macroexp.el.gz"
      :pointmax 18815
      :fsize 6265
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 18765 . 18766) (symbol 18490 . 18507) (open-paren 18489 . 18490)))
    (semanticdb-table "gv.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [3158 3177])
            ("gv-get" function (:arguments ("place" "do")) nil [3434 5143])
            ("gv-letplace" function (:arguments ("vars" "place" "body")) nil [5160 5811])
            ("gv-define-expander" function (:arguments ("name" "handler")) nil [5881 6571])
            ("gv--defun-declaration" function (:arguments ("symbol" "name" "args" "handler" "fix")) nil [6588 7420])
            ("or" code nil nil [7437 7596])
            ("or" code nil nil [7612 7765])
            ("gv--defsetter" function (:arguments ("name" "setter" "do" "args" "vars")) nil [8286 8969])
            ("gv-define-setter" function (:arguments ("name" "arglist" "body")) nil [8986 9818])
            ("gv-define-simple-setter" function (:arguments ("name" "setter" "fix-return")) nil [9835 10800])
            ("setf" function (:arguments ("args")) nil [10867 11561])
            ("put" code nil nil [12783 12835])
            ("put" code nil nil [12941 13140])
            ("gv-define-simple-setter" code nil nil [13181 13216])
            ("gv-define-simple-setter" code nil nil [13217 13253])
            ("gv-define-simple-setter" code nil nil [13254 13290])
            ("gv-define-setter" code nil nil [13341 13396])
            ("gv-define-setter" code nil nil [13397 13452])
            ("gv-define-setter" code nil nil [13453 13508])
            ("gv-define-setter" code nil nil [13509 13564])
            ("gv-define-setter" code nil nil [13565 13682])
            ("gv-define-simple-setter" code nil nil [13683 13716])
            ("gv-define-setter" code nil nil [13717 13788])
            ("put" code nil nil [13863 14025])
            ("gv-define-simple-setter" code nil nil [14026 14072])
            ("gv-define-simple-setter" code nil nil [14073 14120])
            ("gv-define-simple-setter" code nil nil [14121 14163])
            ("put" code nil nil [14165 14483])
            ("gv-define-simple-setter" code nil nil [14528 14579])
            ("gv-define-simple-setter" code nil nil [14580 14646])
            ("gv-define-simple-setter" code nil nil [14647 14714])
            ("gv-define-simple-setter" code nil nil [14715 14772])
            ("gv-define-simple-setter" code nil nil [14773 14829])
            ("gv-define-simple-setter" code nil nil [14830 14879])
            ("gv-define-setter" code nil nil [14880 14985])
            ("gv-define-setter" code nil nil [14986 15091])
            ("gv-define-simple-setter" code nil nil [15092 15151])
            ("gv-define-simple-setter" code nil nil [15152 15211])
            ("gv-define-simple-setter" code nil nil [15212 15275])
            ("gv-define-simple-setter" code nil nil [15276 15325])
            ("gv-define-simple-setter" code nil nil [15326 15389])
            ("gv-define-setter" code nil nil [15390 15506])
            ("gv-define-setter" code nil nil [15507 15637])
            ("gv-define-setter" code nil nil [15638 15725])
            ("gv-define-setter" code nil nil [15726 15803])
            ("gv-define-setter" code nil nil [15804 15877])
            ("gv-define-setter" code nil nil [15878 15951])
            ("gv-define-setter" code nil nil [15953 16100])
            ("put" code nil nil [16331 16549])
            ("let" code nil nil [16551 16883])
            ("put" code nil nil [16885 17926])
            ("put" code nil nil [17928 19606])
            ("put" code nil nil [19645 20006])
            ("put" code nil nil [20008 20455])
            ("gv-ref" function (:arguments ("place")) nil [20488 20887])
            ("gv-deref" function (:arguments ("ref")) nil [20889 21092])
            ("gv-define-setter" code nil nil [21336 21396])
            ("gv" package nil nil [22024 22037]))          
      :file "gv.el.gz"
      :pointmax 22058
      :fsize 6692
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "timer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1046 1063])
            ("cl-defstruct" code nil nil [1066 1818])
            ("timerp" function (:arguments ("object")) nil [1820 1925])
            ("timer--check" function (:arguments ("timer")) nil [1927 2032])
            ("timer--time-setter" function (:arguments ("timer" "time")) nil [2034 2468])
            ("timer--time" function (:arguments ("timer")) nil [2494 2680])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [2682 3077])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [3079 3578])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [3580 4585])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs" "psecs")) nil [4587 5028])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [5030 5172])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs" "psecs")) nil [5174 5506])
            ("timer-set-time-with-usecs" function (:arguments ("timer" "time" "usecs" "delta")) nil [5508 6161])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [6163 6393])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [6396 7395])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [7397 7913])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7915 8793])
            ("defalias" code nil nil [8795 8836])
            ("cancel-timer" function (:arguments ("timer")) nil [8838 9042])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [9044 9466])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [9468 10006])
            ("timer-event-last" variable nil nil [10055 10113])
            ("timer-event-last-1" variable nil nil [10114 10182])
            ("timer-event-last-2" variable nil nil [10183 10252])
            ("timer-max-repeats" variable (:default-value 10) nil [10254 10631])
            ("timer-until" function (:arguments ("timer" "time")) nil [10633 10890])
            ("timer-event-handler" function (:arguments ("timer")) nil [10892 13826])
            ("timeout-event-p" function (:arguments ("event")) nil [13889 14013])
            ("declare-function" code nil nil [14017 14068])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [14070 16363])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [16365 16851])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [16853 17157])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [17159 18310])
            ("with-timeout-timers" variable nil nil [18313 18416])
            ("with-timeout" function (:arguments ("list" "body")) nil [18418 19897])
            ("with-timeout-suspend" function nil nil [19899 20362])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [20364 20707])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [20709 20949])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-06) (cons "microsecond" 1e-06) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [20952 21468])
            ("timer-duration" function (:arguments ("string")) nil [21470 22172])
            ("internal-timer-start-idle" function nil nil [22174 22401])
            ("timer" package nil nil [22404 22420]))          
      :file "timer.el.gz"
      :pointmax 22445
      :fsize 7169
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1063 . 1064) (symbol 1028 . 1045) (open-paren 1027 . 1028)))
    (semanticdb-table "syntax.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1645 1662])
            ("font-lock-beginning-of-syntax-function" variable nil nil [1665 1712])
            ("syntax-propertize-function" variable nil nil [1766 3034])
            ("syntax-propertize-chunk-size" variable (:default-value 500) nil [3036 3077])
            ("syntax-propertize-extend-region-functions" variable (:default-value (quote (syntax-propertize-wholelines))) nil [3079 3889])
            ("make-variable-buffer-local" code nil nil [4020 4091])
            ("syntax-propertize-wholelines" function (:arguments ("start" "end")) nil [4093 4291])
            ("syntax-propertize-multiline" function (:arguments ("beg" "end")) nil [4293 4770])
            ("syntax-propertize--done" variable (:default-value -1) nil [4772 4871])
            ("make-variable-buffer-local" code nil nil [4872 4925])
            ("syntax-propertize--shift-groups" function (:arguments ("re" "n")) nil [4927 5159])
            ("syntax-propertize-precompile-rules" function (:arguments ("rules")) nil [5161 5937])
            ("syntax-propertize-rules" function (:arguments ("rules")) nil [5939 13150])
            ("syntax-propertize-via-font-lock" function (:arguments ("keywords")) nil [13152 13666])
            ("syntax-propertize" function (:arguments ("pos")) nil [13668 15438])
            ("syntax-ppss-depth" function (:arguments ("ppss")) nil [15493 15543])
            ("syntax-ppss-toplevel-pos" function (:arguments ("ppss")) nil [15545 16470])
            ("syntax-ppss-context" function (:arguments ("ppss")) nil [16472 16582])
            ("syntax-ppss-max-span" variable (:default-value 20000) nil [16584 16803])
            ("syntax-begin-function" variable nil nil [16805 17016])
            ("syntax-ppss-cache" variable nil nil [17018 17105])
            ("make-variable-buffer-local" code nil nil [17106 17153])
            ("syntax-ppss-last" variable nil nil [17154 17220])
            ("make-variable-buffer-local" code nil nil [17221 17267])
            ("defalias" code nil nil [17269 17339])
            ("syntax-ppss-flush-cache" function (:arguments ("beg" "ignored")) nil [17340 18567])
            ("syntax-ppss-stats" variable (:default-value [(0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (0 . 0.0) (1 . 2500.0)]) nil [18569 18662])
            ("syntax-ppss-stats" function nil nil [18663 18829])
            ("syntax-ppss" function (:arguments ("pos")) nil [18831 25365])
            ("syntax-ppss-debug" function nil nil [25391 25615])
            ("syntax" package nil nil [26199 26216]))          
      :file "syntax.el.gz"
      :pointmax 26242
      :fsize 8313
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 1662 . 1663) (symbol 1627 . 1644) (open-paren 1626 . 1627))))
  :file "!home!marselo!bin!emacs!share!emacs!24.5!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
