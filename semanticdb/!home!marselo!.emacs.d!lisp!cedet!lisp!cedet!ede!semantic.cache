;; Object ede/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ede/"
  :tables
  (list
    (semanticdb-table "proj.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ede/proj-comp" include nil nil [1225 1249])
            ("ede/make" include nil nil [1250 1269])
            ("declare-function" code nil nil [1271 1326])
            ("declare-function" code nil nil [1327 1388])
            ("ede-proj-target-aux" function (:prototype-flag t) nil [1390 1488])
            ("ede-proj-target-elisp" function (:prototype-flag t) nil [1489 1591])
            ("ede-proj-target-elisp-autoloads" function (:prototype-flag t) nil [1592 1708])
            ("ede-proj-target-scheme" function (:prototype-flag t) nil [1709 1813])
            ("ede-proj-target-makefile-miscelaneous" function (:prototype-flag t) nil [1814 1956])
            ("ede-proj-target-makefile-program" function (:prototype-flag t) nil [1957 2066])
            ("ede-proj-target-makefile-archive" function (:prototype-flag t) nil [2067 2195])
            ("ede-proj-target-makefile-shared-object" function (:prototype-flag t) nil [2196 2319])
            ("ede-proj-target-makefile-info" function (:prototype-flag t) nil [2320 2418])
            ("eieio-defclass-autoload" code nil nil [2420 2546])
            ("eieio-defclass-autoload" code nil nil [2547 2686])
            ("eieio-defclass-autoload" code nil nil [2687 2837])
            ("eieio-defclass-autoload" code nil nil [2838 2970])
            ("eieio-defclass-autoload" code nil nil [2971 3150])
            ("eieio-defclass-autoload" code nil nil [3151 3308])
            ("eieio-defclass-autoload" code nil nil [3309 3485])
            ("eieio-defclass-autoload" code nil nil [3486 3654])
            ("eieio-defclass-autoload" code nil nil [3655 3790])
            ("eieio-defclass-autoload" code nil nil [3831 3984])
            ("ede-proj-target" type
               (:superclasses "ede-target"
                :members 
                  ( ("auxsource" variable
                       (:documentation "Auxiliary source files included in this target.
Each of these is considered equivalent to a source file, but it is not
distributed, and each should have a corresponding rule to build it."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("dirty" variable
                       (:documentation "Non-nil when generated files needs updating."
                        :default-value "nil"
                        :type "boolean")
                        nil nil)
                    ("compiler" variable
                       (:documentation "The compiler to be used to compile this object.
This should be a symbol, which contains the object defining the compiler.
This enables save/restore to do so by name, permitting the sharing
of these compiler resources, and global customization thereof."
                        :default-value "nil"
                        :type "(or null symbol)")
                        nil nil)
                    ("linker" variable
                       (:documentation "The linker to be used to link compiled sources for this object.
This should be a symbol, which contains the object defining the linker.
This enables save/restore to do so by name, permitting the sharing
of these linker resources, and global customization thereof."
                        :default-value "nil"
                        :type "(or null symbol)")
                        nil nil)
                    ("phony" variable
                       (:documentation "A phony target is one where the build target does not relate to a file.
Such targets are always built, but make knows how to deal with them.."
                        :static-flag t
                        :default-value "nil"
                        :type "boolean")
                        nil nil)
                    ("availablecompilers" variable
                       (:documentation "A list of `ede-compiler' objects.
These are the compilers the user can choose from when setting the
`compiler' slot."
                        :static-flag t
                        :default-value "nil"
                        :type "(or null list)")
                        nil nil)
                    ("availablelinkers" variable
                       (:documentation "A list of `ede-linker' objects.
These are the linkers the user can choose from when setting the
`linker' slot."
                        :static-flag t
                        :default-value "nil"
                        :type "(or null list)")
                        nil nil))                  
                :type "class")
                nil [4009 6392])
            ("ede-proj-target-makefile" type
               (:superclasses "ede-proj-target"
                :members 
                  ( ("makefile" variable
                       (:documentation "File name of generated Makefile."
                        :default-value "Makefile"
                        :type "string")
                        nil nil)
                    ("partofall" variable
                       (:documentation "Non nil means the rule created is part of the all target.
Setting this to nil creates the rule to build this item, but does not
include it in the ALL`all:' rule."
                        :default-value "t"
                        :type "boolean")
                        nil nil)
                    ("configuration-variables" variable
                       (:documentation "Makefile variables appended to use in different configurations.
These variables are used in the makefile when a configuration becomes active.
Target variables are always renamed such as foo_CFLAGS, then included into
commands where the variable would usually appear."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("rules" variable
                       (:documentation "Arbitrary rules and dependencies needed to make this target.
It is safe to leave this blank."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [6394 7922])
            ("ede-proj-target-alist" variable (:default-value (quote (("program" . ede-proj-target-makefile-program) ("archive" . ede-proj-target-makefile-archive) ("sharedobject" . ede-proj-target-makefile-shared-object) ("emacs lisp" . ede-proj-target-elisp) ("emacs lisp autoloads" . ede-proj-target-elisp-autoloads) ("info" . ede-proj-target-makefile-info) ("auxiliary" . ede-proj-target-aux) ("scheme" . ede-proj-target-scheme) ("miscellaneous" . ede-proj-target-makefile-miscelaneous)))) nil [7924 8489])
            ("ede-proj-register-target" function (:arguments ("name" "class")) nil [8491 8814])
            ("ede-proj-project" type
               (:interfaces ("ede-project")
                :superclasses "eieio-persistent"
                :members 
                  ( ("extension" variable (:default-value ".ede") nil nil)
                    ("file-header-line" variable (:default-value ";; EDE Project Files are auto generated: Do Not Edit") nil nil)
                    ("makefile-type" variable
                       (:documentation "The type of Makefile to generate.
Can be one of 'Makefile, 'Makefile.in, or 'Makefile.am.
If this value is NOT 'Makefile, then that overrides the :makefile slot
in targets."
                        :default-value "Makefile"
                        :type "symbol")
                        nil nil)
                    ("variables" variable
                       (:documentation "Variables to set in this Makefile."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("configuration-variables" variable
                       (:documentation "Makefile variables to use in different configurations.
These variables are used in the makefile when a configuration becomes active."
                        :default-value "(\"debug\" ((\"DEBUG\" . \"1\")))"
                        :type "list")
                        nil nil)
                    ("inference-rules" variable
                       (:documentation "Inference rules to add to the makefile."
                        :default-value "nil")
                        nil nil)
                    ("include-file" variable
                       (:documentation "Additional files to include.
These files can contain additional rules, variables, and customizations."
                        :default-value "nil")
                        nil nil)
                    ("automatic-dependencies" variable
                       (:documentation "Non-nil to do implement automatic dependencies in the Makefile."
                        :default-value "t"
                        :type "boolean")
                        nil nil)
                    ("menu" variable (:default-value "([\"Regenerate Makefiles\" ede-proj-regenerate t] [\"Upload Distribution\" ede-upload-distribution t])") nil nil)
                    ("metasubproject" variable
                       (:documentation "Non-nil if this is a metasubproject.
Usually, a subproject is determined by a parent project.  If multiple top level
projects are grouped into a large project not maintained by EDE, then you need
to set this to non-nil.  The only effect is that the `dist' rule will then avoid
making a tar file."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [8816 11376])
            ("ede-proj-load" function (:arguments ("project" "rootproj")) nil [11388 12423])
            ("ede-proj-save" function (:arguments ("project")) nil [12425 12811])
            ("ede-commit-local-variables" function
               (:parent "ede-proj-project"
                :arguments ("proj"))
                nil [12813 12946])
            ("eieio-done-customizing" function
               (:parent "ede-proj-project"
                :arguments ("proj"))
                nil [12948 13150])
            ("eieio-done-customizing" function
               (:parent "ede-proj-target"
                :arguments ("target"))
                nil [13152 13401])
            ("ede-commit-project" function
               (:parent "ede-proj-project"
                :arguments ("proj"))
                nil [13403 13525])
            ("ede-buffer-mine" function
               (:parent "ede-proj-project"
                :arguments ("this" "buffer"))
                nil [13527 14042])
            ("ede-buffer-mine" function
               (:parent "ede-proj-target"
                :arguments ("this" "buffer"))
                nil [14044 14265])
            ("ede-proj-target-history" variable nil nil [14298 14379])
            ("project-new-target" function
               (:parent "ede-proj-project"
                :arguments ("this" "name" "type" "autoadd"))
                nil [14381 15743])
            ("project-new-target-custom" function
               (:parent "ede-proj-project"
                :arguments ("this"))
                nil [15745 16142])
            ("project-delete-target" function
               (:parent "ede-proj-target"
                :arguments ("this"))
                nil [16144 16859])
            ("project-add-file" function
               (:parent "ede-proj-target"
                :arguments ("this" "file"))
                nil [16861 17480])
            ("project-remove-file" function
               (:parent "ede-proj-target"
                :arguments ("target" "file"))
                nil [17482 17823])
            ("project-update-version" function
               (:parent "ede-proj-project"
                :arguments ("this"))
                nil [17825 17949])
            ("project-make-dist" function
               (:parent "ede-proj-project"
                :arguments ("this"))
                nil [17951 18523])
            ("project-dist-files" function
               (:parent "ede-proj-project"
                :arguments ("this"))
                nil [18525 18804])
            ("project-compile-project" function
               (:parent "ede-proj-project"
                :arguments ("proj" "command"))
                nil [18806 19298])
            ("project-compile-target" function
               (:parent "ede-proj-target"
                :arguments ("obj" "command"))
                nil [19347 19582])
            ("project-compile-target" function
               (:parent "ede-proj-target-makefile"
                :arguments ("obj" "command"))
                nil [19584 19953])
            ("project-debug-target" function
               (:parent "ede-proj-target"
                :arguments ("obj"))
                nil [19955 20128])
            ("project-run-target" function
               (:parent "ede-proj-target"
                :arguments ("obj"))
                nil [20130 20285])
            ("ede-proj-makefile-target-name" function
               (:parent "ede-proj-target"
                :arguments ("this"))
                nil [20287 20427])
            ("ede-want-file-auxiliary-p" function
               (:parent "ede-target"
                :arguments ("this" "file"))
                nil [20473 20809])
            ("ede-proj-compilers" function
               (:parent "ede-proj-target"
                :arguments ("obj"))
                nil [20811 22199])
            ("ede-proj-linkers" function
               (:parent "ede-proj-target"
                :arguments ("obj"))
                nil [22201 23623])
            ("ede-proj-makefile-type" function (:arguments ("proj")) nil [23685 23834])
            ("ede-proj-automake-p" function (:arguments ("proj")) nil [23836 23995])
            ("ede-proj-autoconf-p" function (:arguments ("proj")) nil [23997 24156])
            ("ede-proj-make-p" function (:arguments ("proj")) nil [24158 24310])
            ("ede-proj-dist-makefile" function
               (:parent "ede-proj-project"
                :arguments ("this"))
                nil [24312 25156])
            ("ede-proj-regenerate" function (:user-visible-flag t) nil [25158 25317])
            ("ede-proj-makefile-create-maybe" function
               (:parent "ede-proj-project"
                :arguments ("this" "mfilename"))
                nil [25319 25727])
            ("ede-proj-setup-buildenvironment" function
               (:parent "ede-proj-project"
                :arguments ("this" "force"))
                nil [25729 26717])
            ("project-rescan" function
               (:parent "ede-proj-project"
                :arguments ("this"))
                nil [26750 27102])
            ("ede/proj" package nil nil [27104 27123]))          
      :file "proj.el"
      :pointmax 27151
      :fsize 27150
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cpp-root.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ede" include nil nil [6348 6362])
            ("semantic-lex-spp-project-macro-symbol-obarray" variable nil nil [6364 6418])
            ("declare-function" code nil nil [6419 6484])
            ("declare-function" code nil nil [6485 6546])
            ("declare-function" code nil nil [6547 6606])
            ("declare-function" code nil nil [6607 6664])
            ("ede-cpp-root-project-list" variable nil nil [7100 7201])
            ("ede-cpp-root-file-existing" function (:arguments ("dir")) nil [7203 7618])
            ("ede-cpp-root-project-file-for-dir" function (:arguments ("dir")) nil [8446 8650])
            ("ede-cpp-root-count" variable nil nil [8652 8826])
            ("ede-cpp-root-project-root" function (:arguments ("dir")) nil [8843 9141])
            ("ede-cpp-root-load" function (:arguments ("dir" "rootproj")) nil [9143 9443])
            ("ede-add-project-autoload" code nil nil [9460 9971])
            ("ede-cpp-root-target" type
               (:superclasses "ede-target"
                :members 
                  ( ("project" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [10655 10824])
            ("ede-cpp-root-project" type
               (:interfaces ("eieio-instance-tracker")
                :superclasses "ede-project"
                :members 
                  ( ("tracking-symbol" variable (:default-value "(quote ede-cpp-root-project-list)") nil nil)
                    ("include-path" variable
                       (:documentation "The default locate function expands filenames within a project.
If a header file (.h, .hh, etc) name is expanded, and
the :locate-fcn slot is nil, then the include path is checked
first, and other directories are ignored.  For very large
projects, this optimization can save a lot of time.

Directory names in the path can be relative to the current
buffer's `default-directory' (not starting with a /).  Directories
that are relative to the project's root should start with a /, such
as  \"/include\", meaning the directory `include' off the project root
directory."
                        :default-value "(quote (\"/include\" \"../include/\"))"
                        :type "list")
                        nil nil)
                    ("system-include-path" variable
                       (:documentation "The system include path for files in this project.
C files initialized in an ede-cpp-root-project have their semantic
system include path set to this value.  If this is nil, then the
semantic path is not modified."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("spp-table" variable
                       (:documentation "C Preprocessor macros for your files.
Preprocessor symbols will be used while parsing your files.
These macros might be passed in through the command line compiler, or
are critical symbols derived from header files.  Providing header files
macro values through this slot improves accuracy and performance.
Use `:spp-files' to use these files directly."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("spp-files" variable
                       (:documentation "C header file with Preprocessor macros for your files.
The PreProcessor symbols appearing in these files will be used while
parsing files in this project.
See `semantic-lex-c-preprocessor-symbol-map' for more on how this works."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("header-match-regexp" variable
                       (:documentation "Regexp used to identify C/C++ header files."
                        :default-value "\\.\\(h\\(h\\|xx\\|pp\\|\\+\\+\\)?\\|H\\)$\\|\\<\\w+$"
                        :type "string")
                        nil nil)
                    ("locate-fcn" variable
                       (:documentation "The locate function can be used in place of
`ede-expand-filename' so you can quickly customize your custom target
to use specialized local routines instead of the EDE routines.
The function symbol must take two arguments:
  NAME - The name of the file to find.
  DIR - The directory root for this cpp-root project.

It should return the fully qualified file name passed in from NAME.  If that file does not
exist, it should return nil."
                        :default-value "nil"
                        :type "(or null function)")
                        nil nil)
                    ("compile-command" variable
                       (:documentation "Compilation command that will be used for this project.
It could be string or function that will accept proj argument and should return string.
The string will be passed to 'compuile' function that will be issued in root
directory of project."
                        :default-value "nil"
                        :type "(or null string function)")
                        nil nil))                  
                :type "class")
                nil [10841 14020])
            ("initialize-instance" function
               (:parent "ede-cpp-root-project"
                :arguments ("this" "fields"))
                nil [14261 15351])
            ("ede-find-subproject-for-directory" function
               (:parent "ede-cpp-root-project"
                :arguments ("proj" "dir"))
                nil [15509 15659])
            ("ede-find-target" function
               (:parent "ede-cpp-root-project"
                :arguments ("proj" "buffer"))
                nil [15836 16359])
            ("ede-expand-filename-impl" function
               (:parent "ede-cpp-root-project"
                :arguments ("proj" "name"))
                nil [16660 17722])
            ("ede-project-root" function
               (:parent "ede-cpp-root-project"
                :arguments ("this"))
                nil [17724 17809])
            ("ede-project-root-directory" function
               (:parent "ede-cpp-root-project"
                :arguments ("this"))
                nil [17811 17940])
            ("ede-cpp-root-header-file-p" function
               (:parent "ede-cpp-root-project"
                :arguments ("proj" "name"))
                nil [18082 18285])
            ("ede-cpp-root-translate-file" function
               (:parent "ede-cpp-root-project"
                :arguments ("proj" "filename"))
                nil [18287 18892])
            ("ede-system-include-path" function
               (:parent "ede-cpp-root-project"
                :arguments ("this"))
                nil [18894 19047])
            ("ede-preprocessor-map" function
               (:parent "ede-cpp-root-project"
                :arguments ("this"))
                nil [19049 19875])
            ("ede-system-include-path" function
               (:parent "ede-cpp-root-target"
                :arguments ("this"))
                nil [19877 20047])
            ("ede-preprocessor-map" function
               (:parent "ede-cpp-root-target"
                :arguments ("this"))
                nil [20049 20209])
            ("project-compile-project" function
               (:parent "ede-cpp-root-project"
                :arguments ("proj" "command"))
                nil [20211 20844])
            ("project-compile-target" function
               (:parent "ede-cpp-root-target"
                :arguments ("obj" "command"))
                nil [20846 21114])
            ("ede-create-lots-of-projects-under-dir" function (:arguments ("dir" "projfile" "attributes")) nil [21132 21709])
            ("ede/cpp-root" package nil nil [21711 21734]))          
      :file "cpp-root.el"
      :pointmax 21885
      :fsize 21884
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "source.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio-base" include nil nil [1057 1078])
            ("ede-sourcecode" type
               (:superclasses "eieio-instance-inheritor"
                :members 
                  ( ("name" variable
                       (:documentation "The name of this type of source code.
Such as \"C\" or \"Emacs Lisp\""
                        :type "string")
                        nil nil)
                    ("sourcepattern" variable
                       (:documentation "Emacs regexp matching sourcecode this target accepts."
                        :default-value ".*"
                        :type "string")
                        nil nil)
                    ("auxsourcepattern" variable
                       (:documentation "Emacs regexp matching auxiliary source code this target accepts.
Aux source are source code files needed for compilation, which are not compiled
themselves."
                        :default-value "nil"
                        :type "(or null string)")
                        nil nil)
                    ("enable-subdirectories" variable
                       (:documentation "Non nil if this sourcecode type uses subdirectories.
If sourcecode always lives near the target creating it, this should be nil.
If sourcecode can, or typically lives in a subdirectory of the owning
target, set this to t."
                        :default-value "nil"
                        :type "boolean")
                        nil nil)
                    ("garbagepattern" variable
                       (:documentation "Shell file regexp matching files considered as garbage.
This is a list of items added to an `rm' command when executing a `clean'
type directive."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [1090 2464])
            ("ede-sourcecode-list" variable nil nil [2466 2540])
            ("initialize-instance" function
               (:parent "ede-sourcecode"
                :arguments ("this" "fields"))
                nil [2557 3058])
            ("ede-want-file-p" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filename"))
                nil [3060 3283])
            ("ede-want-file-source-p" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filename"))
                nil [3285 3503])
            ("ede-want-file-auxiliary-p" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filename"))
                nil [3505 3805])
            ("ede-want-any-source-files-p" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filenames"))
                nil [3807 4081])
            ("ede-want-any-auxiliary-files-p" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filenames"))
                nil [4083 4360])
            ("ede-want-any-files-p" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filenames"))
                nil [4362 4615])
            ("ede-buffer-header-file" function
               (:parent "ede-sourcecode"
                :arguments ("this" "filename"))
                nil [4617 5057])
            ("when" code nil nil [5084 5566])
            ("ede-source-scheme" variable (:default-value (ede-sourcecode "ede-source-scheme" :name "Scheme" :sourcepattern "\\.scm$")) nil [5673 5821])
            ("ede/source" package nil nil [5992 6013]))          
      :file "source.el"
      :pointmax 6043
      :fsize 6042
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [923 939])
            ("eieio-speedbar" include nil nil [940 965])
            ("ede/auto" include nil nil [966 985])
            ("ede-projects" variable nil nil [1009 1030])
            ("ede-object" variable nil nil [1031 1050])
            ("ede-object-root-project" variable nil nil [1051 1083])
            ("declare-function" code nil nil [1085 1138])
            ("declare-function" code nil nil [1139 1206])
            ("declare-function" code nil nil [1207 1266])
            ("declare-function" code nil nil [1267 1327])
            ("ede-target" type
               (:superclasses "eieio-speedbar-directory-button"
                :members 
                  ( ("buttonface" variable (:default-value "speedbar-file-face") nil nil)
                    ("name" variable
                       (:documentation "Name of this target."
                        :type "string")
                        nil nil)
                    ("path" variable
                       (:documentation "The path to the sources of this target.
Relative to the path of the project it belongs to."
                        :type "string")
                        nil nil)
                    ("source" variable
                       (:documentation "Source files in this target."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("versionsource" variable
                       (:documentation "Source files with a version string in them.
These files are checked for a version string whenever the EDE version
of the master project is changed.  When strings are found, the version
previously there is updated."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("sourcetype" variable
                       (:documentation "A list of `ede-sourcecode' objects this class will handle.
This is used to match target objects with the compilers they can use, and
which files this object is interested in."
                        :static-flag t
                        :type "list")
                        nil nil)
                    ("keybindings" variable
                       (:documentation "Keybindings specialized to this type of target."
                        :static-flag t
                        :default-value "((\"D\" . ede-debug-target))")
                        nil nil)
                    ("menu" variable
                       (:documentation "Menu specialized to this type of target."
                        :static-flag t
                        :default-value "([\"Debug target\" ede-debug-target (ede-buffer-belongs-to-target-p)] [\"Run target\" ede-run-target (ede-buffer-belongs-to-target-p)])")
                        nil nil))                  
                :type "class")
                nil [1439 3719])
            ("ede-project-placeholder" type
               (:superclasses "eieio-speedbar-directory-button"
                :members 
                  ( ("name" variable
                       (:documentation "The name used when generating distribution files."
                        :default-value "Untitled"
                        :type "string")
                        nil nil)
                    ("version" variable
                       (:documentation "The version number used when distributing files."
                        :default-value "1.0"
                        :type "string")
                        nil nil)
                    ("directory" variable
                       (:documentation "Directory this project is associated with."
                        :type "string")
                        nil nil)
                    ("dirinode" variable (:documentation "The inode id for :directory.") nil nil)
                    ("file" variable
                       (:documentation "The File uniquely tagging this project instance.
For some project types, this will be the file that stores the project configuration.
In other projects types, this file is merely a unique identifier to this type of project."
                        :type "string")
                        nil nil)
                    ("rootproject" variable
                       (:documentation "Pointer to our root project."
                        :default-value "nil"
                        :type "(or null ede-project-placeholder-child)")
                        nil nil))                  
                :type "class")
                nil [3957 5264])
            ("ede-project" type
               (:superclasses "ede-project-placeholder"
                :members 
                  ( ("subproj" variable
                       (:documentation "Sub projects controlled by this project.
For Automake based projects, each directory is treated as a project."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("targets" variable
                       (:documentation "List of top level targets in this project."
                        :type "ede-target-list")
                        nil nil)
                    ("locate-obj" variable
                       (:documentation "A locate object to use as a backup to `ede-expand-filename'."
                        :type "(or null ede-locate-base-child)")
                        nil nil)
                    ("tool-cache" variable
                       (:documentation "List of tool cache configurations in this project.
This allows any tool to create, manage, and persist project-specific settings."
                        :type "list")
                        nil nil)
                    ("mailinglist" variable
                       (:documentation "An email address where users might send email for help."
                        :type "string")
                        nil nil)
                    ("web-site-url" variable
                       (:documentation "URL to this projects web site.
This is a URL to be sent to a web site for documentation."
                        :type "string")
                        nil nil)
                    ("web-site-directory" variable (:documentation "A directory where web pages can be found by Emacs.
For remote locations use a path compatible with ange-ftp or EFS.
You can also use TRAMP for use with rcp & scp.") nil nil)
                    ("web-site-file" variable (:documentation "A file which contains the home page for this project.
This file can be relative to slot `web-site-directory'.
This can be a local file, use ange-ftp, EFS, or TRAMP.") nil nil)
                    ("ftp-site" variable
                       (:documentation "FTP site where this project's distribution can be found.
This FTP site should be in Emacs form, as needed by `ange-ftp', but can
also be of a form used by TRAMP for use with scp, or rcp."
                        :type "string")
                        nil nil)
                    ("ftp-upload-site" variable
                       (:documentation "FTP Site to upload new distributions to.
This FTP site should be in Emacs form as needed by `ange-ftp'.
If this slot is nil, then use `ftp-site' instead."
                        :type "string")
                        nil nil)
                    ("configurations" variable
                       (:documentation "List of available configuration types.
Individual target/project types can form associations between a configuration,
and target specific elements such as build variables."
                        :default-value "(\"debug\" \"release\")"
                        :type "list")
                        nil nil)
                    ("configuration-default" variable
                       (:documentation "The default configuration."
                        :default-value "debug")
                        nil nil)
                    ("local-variables" variable
                       (:documentation "Project local variables"
                        :default-value "nil")
                        nil nil)
                    ("keybindings" variable
                       (:documentation "Keybindings specialized to this type of target."
                        :static-flag t
                        :default-value "((\"D\" . ede-debug-target) (\"R\" . ede-run-target))")
                        nil nil)
                    ("menu" variable
                       (:documentation "Menu specialized to this type of target."
                        :static-flag t
                        :default-value "([\"Update Version\" ede-update-version ede-object] [\"Version Control Status\" ede-vc-project-directory ede-object] [\"Edit Project Homepage\" ede-edit-web-page (and ede-object (oref (ede-toplevel) web-site-file))] [\"Browse Project URL\" ede-web-browse-home (and ede-object (not (string= \"\" (oref (ede-toplevel) web-site-url))))] \"--\" [\"Rescan Project Files\" ede-rescan-toplevel t] [\"Edit Projectfile\" ede-edit-file-target (ede-buffer-belongs-to-project-p)])")
                        nil nil))                  
                :type "class")
                nil [5698 10239])
            ("ede-with-projectfile" function (:arguments ("obj" "forms")) nil [10285 10778])
            ("put" code nil nil [10779 10830])
            ("ede-project-placeholder-cache-file" variable (:default-value (locate-user-emacs-file "ede-projects.el" ".projects.ede")) nil [11023 11215])
            ("ede-project-cache-files" variable nil nil [11217 11300])
            ("ede-save-cache" function (:user-visible-flag t) nil [11302 12287])
            ("ede-load-cache" function nil nil [12289 13193])
            ("ede-subproject-relative-path" function
               (:parent "ede-project"
                :arguments ("proj" "parent-in"))
                nil [13804 14327])
            ("ede-subproject-p" function
               (:parent "ede-project"
                :arguments ("proj"))
                nil [14329 14550])
            ("ede-name" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [14761 14856])
            ("ede-target-name" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [14858 15003])
            ("ede-name" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [15005 15161])
            ("ede-description" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [15163 15409])
            ("ede-description" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [15411 15616])
            ("ede-header-file" function nil nil [15891 16115])
            ("ede-buffer-header-file" function
               (:parent "ede-project"
                :arguments ("this" "buffer"))
                nil [16117 16235])
            ("ede-buffer-header-file" function
               (:parent "ede-target"
                :arguments ("this" "buffer"))
                nil [16237 16771])
            ("ede-documentation-files" function nil nil [16773 17099])
            ("ede-buffer-documentation-files" function
               (:parent "ede-project"
                :arguments ("this" "buffer"))
                nil [17101 17285])
            ("ede-buffer-documentation-files" function
               (:parent "ede-target"
                :arguments ("this" "buffer"))
                nil [17287 17783])
            ("ede-documentation" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [17785 18278])
            ("ede-documentation" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [18280 18484])
            ("ede-html-documentation-files" function nil nil [18486 18646])
            ("ede-html-documentation" function
               (:parent "ede-project"
                :arguments ("this"))
                nil [18648 18765])
            ("ede-want-file-p" function
               (:parent "ede-target"
                :arguments ("this" "file"))
                nil [18917 19233])
            ("ede-want-file-source-p" function
               (:parent "ede-target"
                :arguments ("this" "file"))
                nil [19235 19565])
            ("ede-target-sourcecode" function
               (:parent "ede-target"
                :arguments ("this"))
                nil [19567 19828])
            ("ede-adebug-project" function (:user-visible-flag t) nil [19850 20150])
            ("ede-adebug-project-parent" function (:user-visible-flag t) nil [20152 20464])
            ("ede-adebug-project-root" function (:user-visible-flag t) nil [20466 20764])
            ("ede-toplevel" function (:arguments ("subproj")) nil [20898 21323])
            ("ede-normalize-file/directory" function (:arguments ("this" "project-file-name")) nil [21353 22051])
            ("ede/base" package nil nil [22278 22297]))          
      :file "base.el"
      :pointmax 22440
      :fsize 22439
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "auto.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1090 1106])
            ("declare-function" code nil nil [1108 1153])
            ("declare-function" code nil nil [1154 1209])
            ("ede-project-autoload-dirmatch" type
               (:members 
                  ( ("fromconfig" variable
                       (:documentation "A config file within which the match pattern lives."
                        :default-value "nil")
                        nil nil)
                    ("configregex" variable
                       (:documentation "A regexp to identify the dirmatch pattern."
                        :default-value "nil")
                        nil nil)
                    ("configregexidx" variable
                       (:documentation "An index into the match-data of `configregex'."
                        :default-value "nil")
                        nil nil)
                    ("configdatastash" variable
                       (:documentation "Save discovered match string."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [1211 2048])
            ("ede-dirmatch-installed" function
               (:parent "ede-project-autoload-dirmatch"
                :arguments ("dirmatch"))
                nil [2050 2480])
            ("ede-do-dirmatch" function
               (:parent "ede-project-autoload-dirmatch"
                :arguments ("dirmatch" "file"))
                nil [2483 3670])
            ("declare-function" code nil nil [3672 3717])
            ("declare-function" code nil nil [3718 3773])
            ("ede-project-autoload" type
               (:members 
                  ( ("name" variable (:documentation "Name of this project type") nil nil)
                    ("file" variable (:documentation "The lisp file belonging to this class.") nil nil)
                    ("proj-file" variable (:documentation "Name of a project file of this type.") nil nil)
                    ("proj-root-dirmatch" variable
                       (:documentation "To avoid loading a project, check if the directory matches this.
For projects that use directory name matches, a function would load that project.
Specifying this matcher will allow EDE to check without loading the project."
                        :type "(or string ede-project-autoload-dirmatch)")
                        nil nil)
                    ("proj-root" variable
                       (:documentation "A function symbol to call for the project root.
This function takes no arguments, and returns the current directories
root, if available.  Leave blank to use the EDE directory walking
routine instead."
                        :type "function")
                        nil nil)
                    ("initializers" variable
                       (:documentation "Initializers passed to the project object.
These are used so there can be multiple types of projects
associated with a single object class, based on the initializers used."
                        :default-value "nil")
                        nil nil)
                    ("load-type" variable (:documentation "Fn symbol used to load this project file.") nil nil)
                    ("class-sym" variable (:documentation "Symbol representing the project class to use.") nil nil)
                    ("generic-p" variable
                       (:documentation "Generic projects are added to the project list at the end.
The add routine will set this to non-nil so that future non-generic placement will
be successful."
                        :default-value "nil")
                        nil nil)
                    ("new-p" variable
                       (:documentation "Non-nil if this is an option when a user creates a project."
                        :default-value "t")
                        nil nil)
                    ("safe-p" variable
                       (:documentation "Non-nil if the project load files are \"safe\".
An unsafe project is one that loads project variables via Emacs
Lisp code.  A safe project is one that loads project variables by
scanning files without loading Lisp code from them."
                        :default-value "t")
                        nil nil))                  
                :type "class")
                nil [3775 6039])
            ("ede-project-class-files" variable (:default-value (list (ede-project-autoload "edeproject-makefile" :name "Make" :file (quote ede/proj) :proj-file "Project.ede" :load-type (quote ede-proj-load) :class-sym (quote ede-proj-project) :safe-p nil) (ede-project-autoload "edeproject-automake" :name "Automake" :file (quote ede/proj) :proj-file "Project.ede" :initializers (quote (:makefile-type Makefile\.am)) :load-type (quote ede-proj-load) :class-sym (quote ede-proj-project) :safe-p nil) (ede-project-autoload "automake" :name "automake" :file (quote ede/project-am) :proj-file "Makefile.am" :load-type (quote project-am-load) :class-sym (quote project-am-makefile) :new-p nil :safe-p t))) nil [6041 6797])
            ("put" code nil nil [6799 6853])
            ("ede-add-project-autoload" function (:arguments ("projauto" "flag")) nil [6855 8542])
            ("ede-project-root" function
               (:parent "ede-project-autoload"
                :arguments ("this"))
                nil [8580 8748])
            ("ede-project-dirmatch-p" function (:arguments ("file" "dirmatch")) nil [8750 9336])
            ("ede-project-root-directory" function
               (:parent "ede-project-autoload"
                :arguments ("this" "file"))
                nil [9338 10897])
            ("ede-dir-to-projectfile" function
               (:parent "ede-project-autoload"
                :arguments ("this" "dir"))
                nil [10899 11777])
            ("ede-auto-load-project" function
               (:parent "ede-project-autoload"
                :arguments ("this" "dir"))
                nil [11779 12427])
            ("ede/auto" package nil nil [12429 12448]))          
      :file "auto.el"
      :pointmax 12476
      :fsize 12475
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ede" include nil nil [1238 1252])
            ("declare-function" code nil nil [1254 1309])
            ("declare-function" code nil nil [1310 1369])
            ("declare-function" code nil nil [1370 1428])
            ("declare-function" code nil nil [1429 1482])
            ("ede--disable-inode" variable nil nil [1484 1571])
            ("ede-find-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [1598 2030])
            ("ede-flush-project-hash" function (:user-visible-flag t) nil [2032 2274])
            ("ede-project-root" function
               (:parent "ede-project-placeholder"
                :arguments ("this"))
                nil [2340 2531])
            ("ede-project-root-directory" function
               (:parent "ede-project-placeholder"
                :arguments ("this" "file"))
                nil [2533 2894])
            ("ede--project-inode" function
               (:parent "ede-project-placeholder"
                :arguments ("proj"))
                nil [2897 3147])
            ("ede-find-subproject-for-directory" function
               (:parent "ede-project-placeholder"
                :arguments ("proj" "dir"))
                nil [3149 3917])
            ("ede-inode-directory-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [4153 4325])
            ("ede--put-inode-dir-hash" function (:arguments ("dir" "inode")) nil [4327 4516])
            ("ede--get-inode-dir-hash" function (:arguments ("dir")) nil [4518 4687])
            ("ede--inode-for-dir" function (:arguments ("dir")) nil [4689 5012])
            ("ede-directory-get-open-project" function (:arguments ("dir" "rootreturn")) nil [5014 5836])
            ("ede--inode-get-toplevel-open-project" function (:arguments ("inode")) nil [5838 6253])
            ("ede-directory-get-toplevel-open-project" function (:arguments ("dir")) nil [6255 7265])
            ("ede-project-directory-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [7422 7616])
            ("ede-flush-directory-hash" function (:user-visible-flag t) nil [7618 8032])
            ("ede-project-directory-remove-hash" function (:arguments ("dir")) nil [8034 8603])
            ("ede-directory-project-from-hash" function (:arguments ("dir")) nil [8605 8803])
            ("ede-directory-project-add-description-to-hash" function (:arguments ("dir" "desc")) nil [8805 9014])
            ("ede-directory-project-p" function (:arguments ("dir" "force")) nil [9016 10094])
            ("ede-toplevel-project-or-nil" function (:arguments ("dir")) nil [10177 10537])
            ("ede-toplevel-project" function (:arguments ("dir")) nil [10539 11988])
            ("ede-convert-path" function
               (:parent "ede-project"
                :arguments ("this" "path"))
                nil [12024 12579])
            ("ede-convert-path" function
               (:parent "ede-target"
                :arguments ("this" "path" "project"))
                nil [12581 13309])
            ("ede-get-locator-object" function (:arguments ("proj")) nil [13337 13774])
            ("ede-expand-filename" function
               (:parent "ede-project"
                :arguments ("this" "filename" "force"))
                nil [13776 16137])
            ("ede-expand-filename-impl" function
               (:parent "ede-project"
                :arguments ("this" "filename" "force"))
                nil [16139 16924])
            ("ede-expand-filename-local" function
               (:parent "ede-project"
                :arguments ("this" "filename"))
                nil [16926 17342])
            ("ede-expand-filename-impl-via-subproj" function
               (:parent "ede-project"
                :arguments ("this" "filename"))
                nil [17344 17897])
            ("ede-expand-filename" function
               (:parent "ede-target"
                :arguments ("this" "filename" "force"))
                nil [17899 18272])
            ("ede-up-directory" function (:arguments ("dir")) nil [18292 18611])
            ("ede-find-project-root" function (:arguments ("prj-file-name" "dir")) nil [18613 18868])
            ("ede-files-find-existing" function (:arguments ("dir" "prj-list")) nil [18870 19302])
            ("ede/files" package nil nil [19305 19325]))          
      :file "files.el"
      :pointmax 19470
      :fsize 19469
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "proj-comp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1889 1902])
            ("ede" include nil nil [1904 1918])
            ("ede/autoconf-edit" include nil nil [1937 1965])
            ("ede-compilation-program" type
               (:superclasses "eieio-instance-inheritor"
                :members 
                  ( ("name" variable
                       (:documentation "Name of this type of compiler."
                        :type "string")
                        nil nil)
                    ("variables" variable
                       (:documentation "Variables needed in the Makefile for this compiler.
An assoc list where each element is (VARNAME . VALUE) where VARNAME
is a string, and VALUE is either a string, or a list of strings.
For example, GCC would define CC=gcc, and emacs would define EMACS=emacs."
                        :type "list")
                        nil nil)
                    ("sourcetype" variable
                       (:documentation "A list of `ede-sourcecode' objects this class will handle.
This is used to match target objects with the compilers and linkers
they can use, and which files this object is interested in."
                        :type "list")
                        nil nil)
                    ("rules" variable
                       (:documentation "Auxiliary rules needed for this compiler to run.
For example, yacc/lex files need additional chain rules, or inferences."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("commands" variable
                       (:documentation "The commands used to execute this compiler.
The object which uses this compiler will place these commands after
its rule definition."
                        :type "list")
                        nil nil)
                    ("autoconf" variable
                       (:documentation "Autoconf function to call if this type of compiler is used.
When a project is in Automake mode, this defines the autoconf function to
call to initialize automake to use this compiler.
For example, there may be multiple C compilers, but they all probably
use the same autoconf form."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("objectextention" variable
                       (:documentation "A string which is the extension used for object files.
For example, C code uses .o on Unix, and Emacs Lisp uses .elc."
                        :type "string")
                        nil nil))                  
                :type "class")
                nil [1978 4174])
            ("ede-compiler" type
               (:superclasses "ede-compilation-program"
                :members 
                  ( ("makedepends" variable
                       (:documentation "Non-nil if this compiler can make dependencies."
                        :default-value "nil"
                        :type "boolean")
                        nil nil)
                    ("uselinker" variable
                       (:documentation "Non-nil if this compiler creates code that can be linked.
This requires that the containing target also define a list of available
linkers that can be used."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [4176 4752])
            ("ede-linker" type
               (:superclasses "ede-compilation-program"
                :type "class")
                nil [4754 4884])
            ("ede-makefile-rule" type
               (:members 
                  ( ("target" variable
                       (:documentation "The target pattern.
A pattern of \"%.o\" is used for inference rules, and would match object files.
A target of \"foo.o\" explicitly matches the file foo.o."
                        :type "string")
                        nil nil)
                    ("dependencies" variable
                       (:documentation "Dependencies on this target.
A pattern of \"%.o\" would match a file of the same prefix as the target
if that target is also an inference rule pattern.
A dependency of \"foo.c\" explicitly lists foo.c as a dependency.
A variable such as $(name_SOURCES) will list all the source files
belonging to the target name."
                        :type "string")
                        nil nil)
                    ("rules" variable
                       (:documentation "Scripts to execute.
These scripts will be executed in sh (Unless the SHELL variable is overridden).
Do not prefix with TAB.
Each individual element of this list can be either a string, or
a lambda function.  (The custom element does not yet express that."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("phony" variable
                       (:documentation "Is this a phony rule?
Adds this rule to a .PHONY list."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [4886 6162])
            ("ede-compiler-list" variable nil nil [6174 6246])
            ("ede-linker-list" variable nil nil [6248 6318])
            ("ede-current-build-list" variable nil nil [6320 6528])
            ("initialize-instance" function
               (:parent "ede-compiler"
                :arguments ("this" "fields"))
                nil [6530 6722])
            ("initialize-instance" function
               (:parent "ede-linker"
                :arguments ("this" "fields"))
                nil [6724 6910])
            ("ede-compiler-begin-unique" function (:arguments ("body")) nil [6912 7155])
            ("ede-compiler-only-once" function (:arguments ("object" "body")) nil [7157 7402])
            ("ede-linker-begin-unique" function (:arguments ("body")) nil [7404 7645])
            ("ede-linker-only-once" function (:arguments ("object" "body")) nil [7647 7890])
            ("add-hook" code nil nil [7892 8250])
            ("ede-proj-find-compiler" function (:arguments ("compilers" "sourcetype")) nil [8263 8545])
            ("ede-proj-find-linker" function (:arguments ("linkers" "sourcetype")) nil [8547 8858])
            ("ede-proj-tweak-autoconf" function
               (:parent "ede-compilation-program"
                :arguments ("this"))
                nil [8873 9280])
            ("ede-proj-flush-autoconf" function
               (:parent "ede-compilation-program"
                :arguments ("this"))
                nil [9282 9423])
            ("proj-comp-insert-variable-once" function (:arguments ("varname" "body")) nil [9425 9810])
            ("put" code nil nil [9811 9872])
            ("ede-proj-makefile-insert-variables" function
               (:parent "ede-compilation-program"
                :arguments ("this"))
                nil [9874 10321])
            ("ede-compiler-intermediate-objects-p" function
               (:parent "ede-compiler"
                :arguments ("this"))
                nil [10323 10608])
            ("ede-compiler-intermediate-object-variable" function
               (:parent "ede-compiler"
                :arguments ("this" "targetname"))
                nil [10610 10875])
            ("ede-proj-makefile-insert-object-variables" function
               (:parent "ede-compiler"
                :arguments ("this" "targetname" "sourcefiles"))
                nil [10877 11766])
            ("ede-proj-makefile-insert-rules" function
               (:parent "ede-compilation-program"
                :arguments ("this"))
                nil [11768 11986])
            ("ede-proj-makefile-insert-rules" function
               (:parent "ede-makefile-rule"
                :arguments ("this"))
                nil [11988 12304])
            ("ede-proj-makefile-insert-commands" function
               (:parent "ede-compilation-program"
                :arguments ("this"))
                nil [12306 12907])
            ("add-hook" code nil nil [12949 13051])
            ("put" code nil nil [13052 13108])
            ("put" code nil nil [13109 13162])
            ("put" code nil nil [13163 13217])
            ("put" code nil nil [13218 13269])
            ("ede/proj-comp" package nil nil [13271 13295]))          
      :file "proj-comp.el"
      :pointmax 13328
      :fsize 13327
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax '((close-paren 1902 . 1903) (symbol 1871 . 1888) (open-paren 1870 . 1871)))
    (semanticdb-table "make.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1179 1233])
            ("if" code nil nil [1235 1779])
            ("ede-make-min-version" variable (:default-value "3.0") nil [1781 1858])
            ("ede-make-command" variable (:default-value (cond ((ede--find-executable "gmake") "gmake") (t "make"))) nil [1860 2205])
            ("ede-make-check-version" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [2222 3433])
            ("ede/make" package nil nil [3435 3454]))          
      :file "make.el"
      :pointmax 3597
      :fsize 3596
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "autoconf-edit.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [1000 1095])
            ("declare-function" code nil nil [1096 1146])
            ("declare-function" code nil nil [1147 1198])
            ("autoconf-new-program" function
               (:user-visible-flag t
                :arguments ("rootdir" "program" "testfile"))
                nil [1200 2228])
            ("autoconf-preferred-macro-order" variable (:default-value (quote ("AC_INIT" "AM_INIT_AUTOMAKE" "AM_CONFIG_HEADER" "AC_ARG_ENABLE" "AC_ARG_WITH" "AC_PROG_MAKE_SET" "AC_PROG_AWK" "AC_PROG_CC" "AC_PROG_CC_C_O" "AC_PROG_CPP" "AC_PROG_CXX" "AC_PROG_CXXCPP" "AC_ISC_POSIX" "AC_PROG_F77" "AC_PROG_GCC_TRADITIONAL" "AC_PROG_INSTALL" "AC_PROG_LEX" "AC_PROG_LN_S" "AC_PROG_RANLIB" "AC_PROG_YACC" "AC_CHECK_PROG" "AC_CHECK_PROGS" "AC_PROG_LIBTOOL" "AC_CHECK_LIB" "AC_PATH_XTRA" "AC_HEADER_STDC" "AC_HEADER_SYS_WAIT" "AC_HEADER_TIME" "AC_HEADERS" "AC_TYPE_PID_T" "AC_TYPE_SIGNAL" "AC_TYPE_UID_T" "AC_STRUCT_TM" "AC_CHECK_SIZEOF" "AC_C_CONST" "AC_CHECK_FUNCS" "AC_TRY_LINK" "AM_PATH_LISPDIR" "AM_INIT_GUILE_MODULE" "AC_OUTPUT"))) nil [2230 3790])
            ("autoconf-multiple-macros" variable (:default-value (quote ("AC_ARG_ENABLE" "AC_ARG_WITH" "AC_CHECK_PROGS" "AC_CHECK_LIB" "AC_CHECK_SIZEOF" "AC_TRY_LINK"))) nil [3792 3989])
            ("autoconf-multiple-multiple-macros" variable (:default-value (quote ("AC_HEADERS" "AC_CHECK_FUNCS"))) nil [3991 4138])
            ("autoconf-in-macro" function (:arguments ("macro")) nil [4140 4328])
            ("autoconf-find-last-macro" function (:arguments ("macro" "ignore-bol")) nil [4330 4832])
            ("autoconf-parameter-strip" function (:arguments ("param")) nil [4834 5348])
            ("autoconf-parameters-for-macro" function (:arguments ("macro" "ignore-bol" "ignore-case")) nil [5350 5915])
            ("autoconf-position-for-macro" function (:arguments ("macro")) nil [5917 6722])
            ("autoconf-insert-macro-at-point" function (:arguments ("macro" "param")) nil [6724 6946])
            ("autoconf-insert-new-macro" function (:arguments ("macro" "param")) nil [6948 8486])
            ("autoconf-find-query-for-header" function
               (:user-visible-flag t
                :arguments ("header"))
                nil [8488 9028])
            ("autoconf-add-query-for-header" function
               (:user-visible-flag t
                :arguments ("header"))
                nil [9030 9269])
            ("autoconf-find-query-for-func" function
               (:user-visible-flag t
                :arguments ("func"))
                nil [9272 9804])
            ("autoconf-add-query-for-func" function
               (:user-visible-flag t
                :arguments ("func"))
                nil [9806 10033])
            ("autoconf-program-builtin" variable (:default-value (quote (("AWK" . "AC_PROG_AWK") ("CC" . "AC_PROG_CC") ("CPP" . "AC_PROG_CPP") ("CXX" . "AC_PROG_CXX") ("CXXCPP" . "AC_PROG_CXXCPP") ("F77" . "AC_PROG_F77") ("GCC_TRADITIONAL" . "AC_PROG_GCC_TRADITIONAL") ("INSTALL" . "AC_PROG_INSTALL") ("LEX" . "AC_PROG_LEX") ("LN_S" . "AC_PROG_LN_S") ("RANLIB" . "AC_PROG_RANLIB") ("YACC" . "AC_PROG_YACC")))) nil [10035 10524])
            ("autoconf-find-query-for-program" function (:arguments ("prog")) nil [10526 11138])
            ("autoconf-add-query-for-program" function
               (:user-visible-flag t
                :arguments ("prog" "names"))
                nil [11140 11656])
            ("autoconf-deleted-text" variable nil nil [11688 11778])
            ("autoconf-inserted-text" variable nil nil [11780 11872])
            ("autoconf-edit-cycle" function (:arguments ("body")) nil [11874 12298])
            ("autoconf-parameter-count" function nil nil [12300 13184])
            ("autoconf-delete-parameter" function (:arguments ("index")) nil [13186 13688])
            ("autoconf-insert" function (:arguments ("text")) nil [13690 13790])
            ("autoconf-set-version" function (:arguments ("version")) nil [13792 14415])
            ("autoconf-set-output" function (:arguments ("outputlist")) nil [14417 14845])
            ("ede/autoconf-edit" package nil nil [14847 14875]))          
      :file "autoconf-edit.el"
      :pointmax 14912
      :fsize 14911
      :lastmodtime '(20757 21970 0 0)
      :unmatched-syntax nil))
  :file "!home!marselo!.emacs.d!lisp!cedet!lisp!cedet!ede!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
